# ==========================================
# DEPENDÊNCIAS DO BACKEND - PLATAFORMA JURÍDICA MULTI-AGENT
# ==========================================
# 
# Este arquivo lista todas as dependências Python necessárias para o backend.
# Seguindo o padrão de "Manutenibilidade por LLM", cada dependência é comentada
# explicando seu propósito específico no projeto.
#
# IMPORTANTE: Versões são fixas (não usar >=) para garantir reprodutibilidade.
# ==========================================

# ===== FRAMEWORK WEB =====

# FastAPI: Framework web moderno com suporte nativo a type hints e validação automática via Pydantic.
# Usado para criar toda a API REST do backend.
# JUSTIFICATIVA PARA LLMs: Type hints tornam o código autodocumentado e fácil de entender.
fastapi==0.104.1

# Uvicorn: Servidor ASGI de alto desempenho para rodar aplicações FastAPI.
# Usado para servir a aplicação em desenvolvimento e produção.
uvicorn[standard]==0.24.0

# ===== VALIDAÇÃO E CONFIGURAÇÃO =====

# Pydantic: Validação de dados usando type hints Python.
# (Instalado automaticamente com FastAPI, mas listado explicitamente)
# Usado para validar requests, responses e carregar configurações (.env).
pydantic==2.5.0

# Pydantic Settings: Extensão do Pydantic para gerenciar configurações de ambiente.
# Usado em backend/src/configuracao/configuracoes.py para carregar variáveis .env
pydantic-settings==2.1.0

# Python-dotenv: Carrega variáveis de ambiente de arquivos .env
# Usado durante desenvolvimento para configurar API keys, paths, etc.
python-dotenv==1.0.0

# ===== INTEGRAÇÃO COM LLMs (OpenAI) =====

# OpenAI SDK: Biblioteca oficial para integração com API da OpenAI
# Usado para:
# - Gerar embeddings (text-embedding-ada-002) para vetorização de documentos
# - Chamadas aos agentes usando GPT-4 para análise jurídica
openai==1.3.0

# ===== BANCO DE DADOS VETORIAL (RAG) =====

# ChromaDB: Banco de dados vetorial open-source para armazenar e buscar embeddings
# Usado para implementar o sistema RAG (Retrieval-Augmented Generation)
# JUSTIFICATIVA PARA LLMs: API simples, execução local, sem necessidade de servidor externo
chromadb==0.4.18

# ===== PROCESSAMENTO DE DOCUMENTOS =====

# PyPDF2: Biblioteca para leitura e manipulação de arquivos PDF
# Usado para extrair texto de PDFs que contêm texto selecionável (não escaneados)
pypdf2==3.0.1

# PDF2Image: Converte páginas de PDF em imagens
# Usado quando PDF é escaneado (imagem) e precisa de OCR
# DEPENDÊNCIA: Requer Poppler instalado no sistema
pdf2image==1.16.3

# Pillow (PIL): Biblioteca de processamento de imagens
# Usado para manipular imagens antes do OCR (redimensionamento, binarização, etc.)
pillow==10.1.0

# pytesseract: Wrapper Python para Tesseract OCR
# Usado para extrair texto de imagens e PDFs escaneados
# DEPENDÊNCIA: Requer Tesseract OCR instalado no sistema
pytesseract==0.3.10

# python-docx: Leitura e escrita de arquivos DOCX (Microsoft Word)
# Usado para extrair texto de petições e documentos jurídicos em formato DOCX
python-docx==1.1.0

# ===== CHUNKING E PROCESSAMENTO DE TEXTO =====

# LangChain: Framework para desenvolvimento de aplicações com LLMs
# Usado para:
# - Chunking (divisão) de textos em pedaços menores para RAG
# - Orquestração de prompts para agentes multi-agent
# - Gerenciamento de memória e contexto
langchain==0.0.340

# tiktoken: Biblioteca da OpenAI para contar tokens
# Usado para:
# - Garantir que chunks não excedam limite de tokens
# - Calcular custo de chamadas à API OpenAI
tiktoken==0.5.2

# ===== UTILIDADES E HELPERS =====

# python-multipart: Necessário para FastAPI processar uploads de arquivos (multipart/form-data)
# Usado no endpoint POST /api/documentos/upload
python-multipart==0.0.6

# aiofiles: Operações assíncronas com arquivos
# Usado para salvar/ler arquivos de forma não-bloqueante (compatível com FastAPI async)
aiofiles==23.2.1

# ===== LOGGING E MONITORAMENTO =====

# loguru: Biblioteca de logging moderna e simples
# Usado para logs estruturados em todo o backend
# JUSTIFICATIVA PARA LLMs: API mais clara que logging padrão do Python
loguru==0.7.2

# ===== CORS (Comunicação Frontend-Backend) =====

# (Incluído no FastAPI via middleware, não requer instalação separada)

# ===== DESENVOLVIMENTO E TESTES (A ADICIONAR) =====

# pytest: Framework de testes (a ser adicionado em tarefas futuras)
# pytest==7.4.3

# httpx: Cliente HTTP para testar endpoints FastAPI (a ser adicionado em tarefas futuras)
# httpx==0.25.2

# ===== TOTAL DE DEPENDÊNCIAS PRINCIPAIS: 16 =====
