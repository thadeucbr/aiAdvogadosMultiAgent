# ==========================================
# VARIÁVEIS DE AMBIENTE - BACKEND
# PLATAFORMA JURÍDICA MULTI-AGENT
# ==========================================
#
# IMPORTANTE: Este é um arquivo de EXEMPLO (template).
# NUNCA commitar o arquivo .env real com valores sensíveis.
#
# INSTRUÇÕES DE USO:
# 1. Copie este arquivo: cp .env.example .env
# 2. Preencha os valores reais no arquivo .env
# 3. O arquivo .env deve estar em .gitignore
#
# ==========================================

# ===== CONFIGURAÇÕES DO SERVIDOR =====

# Ambiente de execução da aplicação
# Valores aceitos: development, staging, production
# Em development: logs mais verbosos, CORS permissivo, debug ativado
# Em production: logs mínimos, CORS restritivo, debug desativado
AMBIENTE=development

# Host onde o servidor FastAPI irá escutar
# 0.0.0.0 = aceita conexões de qualquer interface de rede (necessário para Docker)
# 127.0.0.1 = apenas localhost (mais seguro para desenvolvimento local)
HOST=0.0.0.0

# Porta onde o servidor FastAPI irá escutar
# Padrão: 8000 (convenção FastAPI)
PORT=8000

# ===== OPENAI API =====

# Chave de API da OpenAI (OBRIGATÓRIA)
# Obtenha em: https://platform.openai.com/api-keys
# NUNCA commitar este valor real. Manter como placeholder.
OPENAI_API_KEY=sk-proj-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

# Modelo de LLM usado para análise jurídica pelos agentes
# Opções: gpt-5-nano-2025-08-07, gpt-4, gpt-4-turbo-preview, gpt-3.5-turbo
# Padrão: gpt-5-nano-2025-08-07 (melhor custo-benefício com alta qualidade)
OPENAI_MODEL_ANALISE=gpt-5-nano-2025-08-07

# Modelo usado para gerar embeddings (vetorização de documentos)
# Opções: text-embedding-ada-002 (padrão), text-embedding-3-small, text-embedding-3-large
# Padrão: text-embedding-ada-002 (melhor custo-benefício)
OPENAI_MODEL_EMBEDDING=text-embedding-ada-002

# Temperatura para geração de respostas (0.0 a 2.0)
# Valores baixos (0.0-0.3): Respostas mais determinísticas e conservadoras (recomendado para análise jurídica)
# Valores altos (0.7-1.0): Respostas mais criativas e variadas
OPENAI_TEMPERATURE=0.2

# Máximo de tokens na resposta do modelo
# Controla o tamanho máximo da resposta gerada
# Para GPT-5-nano: máximo 16384 (mas usar menos reduz custos)
OPENAI_MAX_TOKENS=2000

# ===== BANCO DE DADOS VETORIAL (ChromaDB) =====

# Caminho no sistema de arquivos onde o ChromaDB persistirá os dados
# Caminho relativo à raiz do backend
# IMPORTANTE: Esta pasta deve existir e ter permissões de escrita
CHROMA_DB_PATH=./dados/chroma_db

# Nome da collection principal no ChromaDB
# Collections são como "tabelas" no ChromaDB, armazenam documentos relacionados
CHROMA_COLLECTION_NAME=documentos_juridicos

# ===== CONFIGURAÇÕES DE PROCESSAMENTO DE DOCUMENTOS =====

# Tamanho máximo de cada chunk de texto (em número de tokens)
# Chunks são pedaços de texto divididos para armazenamento no RAG
# Valores muito pequenos: perda de contexto
# Valores muito grandes: embeddings menos precisos
# Recomendado: 300-500 tokens para análise jurídica
TAMANHO_MAXIMO_CHUNK=500

# Overlap (sobreposição) entre chunks consecutivos (em tokens)
# Garante que informações na fronteira entre chunks não sejam perdidas
# Recomendado: 10-20% do tamanho do chunk
CHUNK_OVERLAP=50

# Tamanho máximo de arquivo de upload (em Megabytes)
# Protege contra uploads muito grandes que podem travar o servidor
# Recomendado: 50MB para documentos jurídicos (processos podem ser grandes)
TAMANHO_MAXIMO_UPLOAD_MB=50

# Tipos de arquivo aceitos (separados por vírgula, sem espaços)
# Usado para validação no upload
TIPOS_ARQUIVO_ACEITOS=.pdf,.docx,.png,.jpg,.jpeg

# ===== TESSERACT OCR =====

# Caminho para o executável do Tesseract OCR
# Deixe VAZIO se Tesseract estiver no PATH do sistema
# No macOS (Homebrew): /opt/homebrew/bin/tesseract
# No Linux (apt): /usr/bin/tesseract
# No Windows: C:\Program Files\Tesseract-OCR\tesseract.exe
TESSERACT_PATH=

# Idioma padrão para OCR
# Valores: por (português), eng (inglês), por+eng (ambos)
# IMPORTANTE: O pacote de idioma deve estar instalado no Tesseract
# Instalação (macOS/Linux): tesseract-ocr-por
TESSERACT_LANG=por

# Nível de confiança mínimo do OCR (0.0 a 1.0)
# Textos extraídos com confiança abaixo deste valor serão marcados como "baixa qualidade"
# Recomendado: 0.75 (75%)
TESSERACT_CONFIANCA_MINIMA=0.75

# ===== CONFIGURAÇÕES DE SEGURANÇA =====

# Secret key para assinatura de tokens JWT (quando implementarmos autenticação)
# IMPORTANTE: Gerar uma chave aleatória forte
# Gerar com: openssl rand -hex 32
# A IMPLEMENTAR em tarefas futuras de autenticação
# SECRET_KEY=sua_chave_secreta_aleatoria_aqui

# Lista de origens permitidas para CORS (separadas por vírgula)
# Em development: permite localhost em várias portas
# Em production: deve listar apenas domínios reais do frontend
# Exemplo production: https://app.exemplo.com,https://www.exemplo.com
CORS_ORIGINS=http://localhost:3000,http://localhost:5173,http://127.0.0.1:3000,http://127.0.0.1:5173

# ===== CONFIGURAÇÕES DE LOGGING =====

# Nível de log (DEBUG, INFO, WARNING, ERROR, CRITICAL)
# DEBUG: Todos os logs (verboso, usar apenas em desenvolvimento)
# INFO: Logs informativos + avisos + erros
# WARNING: Apenas avisos e erros
# ERROR: Apenas erros
# Recomendado development: DEBUG ou INFO
# Recomendado production: WARNING ou ERROR
LOG_LEVEL=INFO

# Caminho para o arquivo de log
# Logs serão salvos neste arquivo (além de aparecer no console)
# Caminho relativo à raiz do backend
LOG_FILE_PATH=./logs/aplicacao.log

# Rotação de logs: tamanho máximo do arquivo de log em MB
# Quando atingir este tamanho, um novo arquivo será criado
LOG_MAX_SIZE_MB=10

# Rotação de logs: número de arquivos de backup a manter
# Exemplo: aplicacao.log, aplicacao.log.1, aplicacao.log.2, ...
LOG_BACKUP_COUNT=5

# ===== CONFIGURAÇÕES DE CACHE (A IMPLEMENTAR) =====

# Cache de embeddings: se True, embeddings já gerados serão salvos para reuso
# Reduz chamadas à API OpenAI e acelera processamento
# A IMPLEMENTAR em tarefas futuras
# CACHE_EMBEDDINGS_ATIVADO=true

# Tempo de vida do cache em segundos
# A IMPLEMENTAR em tarefas futuras
# CACHE_TTL_SEGUNDOS=86400

# ===== CONFIGURAÇÕES DE DESENVOLVIMENTO =====

# Modo de recarga automática do Uvicorn (hot reload)
# True: servidor reinicia automaticamente ao detectar mudanças no código
# False: necessário reiniciar manualmente
# Usar True apenas em development
UVICORN_RELOAD=true

# ==========================================
# FIM DAS VARIÁVEIS DE AMBIENTE
# ==========================================
# 
# CHECKLIST ANTES DE RODAR:
# [ ] Copiei este arquivo para .env
# [ ] Preenchi OPENAI_API_KEY com minha chave real
# [ ] Tesseract OCR está instalado no sistema
# [ ] Pastas ./dados/chroma_db e ./logs existem
# [ ] (Opcional) Ajustei CORS_ORIGINS se frontend estiver em porta diferente
#
# ==========================================
