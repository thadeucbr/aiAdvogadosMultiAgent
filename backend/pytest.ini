# ============================================================================
# CONFIGURAÇÃO DO PYTEST - PLATAFORMA JURÍDICA MULTI-AGENT
# ============================================================================
# CONTEXTO: Este arquivo configura o comportamento do pytest para garantir
#           execução consistente dos testes em qualquer ambiente.
#
# REFERÊNCIA: https://docs.pytest.org/en/stable/reference/customize.html
# ============================================================================

[pytest]

# ============================================================================
# DESCOBERTA DE TESTES
# ============================================================================
# Define onde o pytest deve procurar por arquivos de teste
testpaths = testes

# Padrão de nomes de arquivos de teste (começa com "test_")
python_files = test_*.py

# Padrão de nomes de classes de teste (começa com "Test")
python_classes = Test*

# Padrão de nomes de funções de teste (começa com "test_")
python_functions = test_*

# ============================================================================
# MARCADORES PERSONALIZADOS (MARKERS)
# ============================================================================
# Definição de markers customizados para categorizar testes
markers =
    # Testes unitários - testam funções isoladas sem dependências externas
    unit: Marca testes unitários (funções isoladas, sem IO)
    
    # Testes de integração - testam múltiplos componentes trabalhando juntos
    integration: Marca testes de integração (múltiplos componentes)
    
    # Testes que fazem chamadas reais à API OpenAI (CARO - evitar em CI/CD)
    external_api: Marca testes que chamam APIs externas reais (OpenAI, etc.)
    
    # Testes lentos - demoram mais de 5 segundos para executar
    slow: Marca testes que demoram muito tempo (> 5s)
    
    # Testes de serviços específicos
    servico_extracao: Testes do serviço de extração de texto
    servico_ocr: Testes do serviço de OCR (Tesseract)
    servico_vetorizacao: Testes do serviço de vetorização/embeddings
    servico_banco_vetorial: Testes do serviço ChromaDB
    
    # Testes de agentes
    agente_base: Testes da classe base de agentes
    agente_advogado: Testes do agente advogado coordenador
    agente_perito_medico: Testes do agente perito médico
    agente_perito_seguranca: Testes do agente perito de segurança do trabalho
    orquestrador: Testes do orquestrador multi-agent
    
    # Testes de API
    api: Testes de endpoints da API REST
    
    # Testes de configurações
    config: Testes de configurações e variáveis de ambiente

# ============================================================================
# OPÇÕES DE EXECUÇÃO
# ============================================================================
# Adiciona opções padrão que serão sempre aplicadas ao rodar pytest

# Aumenta verbosidade da saída (mostra mais detalhes)
addopts =
    # Verbosidade média (mostra nome de cada teste)
    -v
    
    # Mostra resumo de warnings
    --strict-markers
    
    # Captura output (print statements só aparecem se o teste falhar)
    --capture=no
    
    # Mostra traceback completo em caso de falha
    --tb=short
    
    # Mostra duração dos 10 testes mais lentos
    --durations=10
    
    # Falha se houver markers não registrados
    --strict-markers
    
    # Habilita suporte a asyncio
    --asyncio-mode=auto
    
    # Configurações de cobertura (coverage)
    --cov=src
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=70
    
    # Ignora warnings de bibliotecas de terceiros
    --disable-warnings

# ============================================================================
# GESTÃO DE WARNINGS
# ============================================================================
# Filtra warnings específicos para deixar a saída mais limpa
filterwarnings =
    # Ignora DeprecationWarnings de bibliotecas de terceiros
    ignore::DeprecationWarning
    
    # Mas MOSTRA nossos próprios DeprecationWarnings
    default::DeprecationWarning:src.*

# ============================================================================
# DESCOBERTA DE MÓDULOS
# ============================================================================
# Garante que o Python encontre o módulo 'src' corretamente
pythonpath = .

# ============================================================================
# TIMEOUT DE TESTES
# ============================================================================
# Timeout máximo por teste (evita testes travados infinitamente)
timeout = 300  # 5 minutos por teste (alguns testes de agentes podem demorar)

# ============================================================================
# CONFIGURAÇÕES DE LOG
# ============================================================================
# Controla como logs são exibidos durante os testes
log_cli = false                # Não mostrar logs no console por padrão
log_cli_level = INFO           # Se mostrar, mostrar a partir de INFO
log_file = testes/pytest.log   # Salvar logs em arquivo
log_file_level = DEBUG         # Logs detalhados no arquivo

# ============================================================================
# NOTAS DE USO:
# ============================================================================
# Executar todos os testes:
#   pytest
#
# Executar apenas testes unitários:
#   pytest -m unit
#
# Executar testes de um serviço específico:
#   pytest -m servico_extracao
#
# Executar excluindo testes lentos:
#   pytest -m "not slow"
#
# Executar excluindo chamadas a APIs externas:
#   pytest -m "not external_api"
#
# Ver cobertura de código:
#   pytest --cov=src --cov-report=html
#   open htmlcov/index.html
#
# Executar um arquivo específico:
#   pytest testes/test_servico_extracao_texto.py
#
# Executar um teste específico:
#   pytest testes/test_servico_extracao_texto.py::test_extrair_texto_de_pdf_com_sucesso
# ============================================================================
