"""
Orquestrador de An√°lise de Peti√ß√µes

CONTEXTO DE NEG√ìCIO:
Este m√≥dulo implementa o orquestrador especializado para an√°lise completa de peti√ß√µes iniciais.
Diferente do OrquestradorMultiAgent (TAREFA-013) que processa consultas livres, este
orquestrador coordena um fluxo FECHADO e ESTRUTURADO para an√°lise de peti√ß√µes.

RESPONSABILIDADES:
1. COORDENAR AN√ÅLISE COMPLETA: Orquestrar execu√ß√£o de todos os agentes especializados
2. GERENCIAR PROGRESSO: Feedback detalhado de cada etapa (0-100%)
3. EXECU√á√ÉO PARALELA: Advogados e peritos em paralelo para otimizar tempo
4. INTEGRA√á√ÉO CONTEXTUAL: Compilar contexto completo (peti√ß√£o + documentos + RAG)
5. TRATAMENTO DE ERROS: Continuar execu√ß√£o mesmo se um agente falhar

FLUXO DE EXECU√á√ÉO:
1. Recuperar peti√ß√£o e documentos do ChromaDB
2. Montar contexto RAG completo
3. Executar advogados especialistas selecionados (PARALELO)
4. Executar peritos selecionados (PARALELO)
5. Aguardar conclus√£o de todos os agentes
6. Executar Agente Estrategista Processual (com pareceres compilados)
7. Executar Agente de Progn√≥stico (com contexto completo)
8. Compilar tudo em ResultadoAnaliseProcesso
9. Atualizar estado da peti√ß√£o (CONCLUIDA)
10. Retornar resultado completo

DIFEREN√áA VS ORQUESTRADOR MULTI-AGENT:
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ OrquestradorMultiAgent (TAREFA-013) ‚îÇ OrquestradorAnalisePeticoes (ESTE)  ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Consultas livres (prompt aberto)    ‚îÇ Fluxo fechado (peti√ß√£o + docs)      ‚îÇ
‚îÇ RAG din√¢mico por consulta            ‚îÇ RAG fixo (peti√ß√£o + complementares) ‚îÇ
‚îÇ Coordenador retorna resposta final   ‚îÇ M√∫ltiplos pareceres individualizados‚îÇ
‚îÇ Sem progn√≥stico                      ‚îÇ Gera progn√≥stico probabil√≠stico     ‚îÇ
‚îÇ Sem estrat√©gia                       ‚îÇ Gera pr√≥ximos passos estrat√©gicos   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

DESIGN PATTERNS:
1. Facade Pattern: Simplifica orquestra√ß√£o complexa de m√∫ltiplos agentes
2. Coordinator Pattern: Coordena execu√ß√£o paralela e sequencial
3. State Management: Atualiza progresso em tempo real

EXEMPLO DE USO:
```python
from servicos.orquestrador_analise_peticoes import criar_orquestrador_analise_peticoes

# Criar orquestrador
orquestrador = criar_orquestrador_analise_peticoes()

# Processar peti√ß√£o
resultado = await orquestrador.analisar_peticao_completa(
    peticao_id="uuid-123",
    advogados_selecionados=["trabalhista", "previdenciario"],
    peritos_selecionados=["medico", "seguranca_trabalho"]
)

# Resultado estruturado:
print(resultado.proximos_passos)        # ProximosPassos
print(resultado.prognostico)            # Prognostico
print(resultado.pareceres_advogados)    # Dict[str, ParecerAdvogado]
print(resultado.pareceres_peritos)      # Dict[str, ParecerPerito]
```

TAREFAS RELACIONADAS:
- TAREFA-040: Modelos de dados (Peti√ß√£o, ResultadoAnaliseProcesso)
- TAREFA-044: Agente Estrategista Processual
- TAREFA-045: Agente de Progn√≥stico
- TAREFA-024-028: Agentes Advogados Especialistas
- TAREFA-011-012: Agentes Peritos
- TAREFA-013: Orquestrador Multi-Agent (refer√™ncia)
"""

import logging
import asyncio
from typing import List, Dict, Any, Optional
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed
from functools import lru_cache

# Importar modelos de dados
from src.modelos.processo import (
    Peticao,
    StatusPeticao,
    ResultadoAnaliseProcesso,
    ProximosPassos,
    Prognostico,
    ParecerAdvogado,
    ParecerPerito,
    DocumentoContinuacao
)

# Importar gerenciadores
from src.servicos.gerenciador_estado_peticoes import (
    obter_gerenciador_estado_peticoes,
    GerenciadorEstadoPeticoes
)
from src.servicos.servico_banco_vetorial import (
    obter_servico_banco_vetorial,
    obter_documento_por_id,
    buscar_chunks_similares
)
from src.servicos.servico_geracao_documento import (
    obter_servico_geracao_documento,
    ServicoGeracaoDocumento
)

# Importar agentes
from src.agentes.agente_estrategista_processual import AgenteEstrategistaProcessual
from src.agentes.agente_prognostico import AgentePrognostico

# Importar factories de agentes advogados
from src.agentes.agente_advogado_trabalhista import AgenteAdvogadoTrabalhista
from src.agentes.agente_advogado_previdenciario import AgenteAdvogadoPrevidenciario
from src.agentes.agente_advogado_civel import AgenteAdvogadoCivel
from src.agentes.agente_advogado_tributario import AgenteAdvogadoTributario

# Importar factories de agentes peritos
from src.agentes.agente_perito_medico import AgentePeritoMedico
from src.agentes.agente_perito_seguranca_trabalho import AgentePeritoSegurancaTrabalho

# Importar exce√ß√µes
from src.utilitarios.gerenciador_llm import ErroGeralAPI


# Configura√ß√£o do logger
logger = logging.getLogger(__name__)


# ==============================================================================
# CONSTANTES
# ==============================================================================

# Mapeamento de identificadores para classes de agentes
MAPA_ADVOGADOS_ESPECIALISTAS = {
    "trabalhista": AgenteAdvogadoTrabalhista,
    "previdenciario": AgenteAdvogadoPrevidenciario,
    "civel": AgenteAdvogadoCivel,
    "tributario": AgenteAdvogadoTributario
}

MAPA_PERITOS = {
    "medico": AgentePeritoMedico,
    "seguranca_trabalho": AgentePeritoSegurancaTrabalho
}


# ==============================================================================
# CLASSE ORQUESTRADOR DE AN√ÅLISE DE PETI√á√ïES
# ==============================================================================

class OrquestradorAnalisePeticoes:
    """
    Orquestrador especializado para an√°lise completa de peti√ß√µes iniciais.
    
    RESPONSABILIDADES:
    1. Coordenar execu√ß√£o de todos os agentes (advogados + peritos + estrategista + progn√≥stico)
    2. Execu√ß√£o paralela de advogados e peritos (otimiza√ß√£o de tempo)
    3. Feedback de progresso detalhado (0-100%)
    4. Tratamento robusto de erros (continuar mesmo se um agente falhar)
    5. Compilar resultado completo estruturado
    
    QUANDO USAR:
    Este √© o PONTO DE ENTRADA para an√°lise completa de peti√ß√µes iniciais.
    Chamado pelo endpoint POST /api/peticoes/{peticao_id}/analisar.
    
    ATRIBUTOS:
    - gerenciador_peticoes: Gerenciador de estado de peti√ß√µes
    - servico_rag: Servi√ßo de banco vetorial (ChromaDB)
    - agente_estrategista: Inst√¢ncia do AgenteEstrategistaProcessual
    - agente_prognostico: Inst√¢ncia do AgentePrognostico
    - max_workers_paralelo: N√∫mero m√°ximo de threads para execu√ß√£o paralela
    
    EXEMPLO:
    ```python
    orquestrador = OrquestradorAnalisePeticoes()
    
    resultado = await orquestrador.analisar_peticao_completa(
        peticao_id="uuid-123",
        advogados_selecionados=["trabalhista"],
        peritos_selecionados=["medico"]
    )
    
    # Resultado estruturado (ResultadoAnaliseProcesso):
    print(resultado.proximos_passos.passos[0].descricao)
    print(resultado.prognostico.cenarios[0].probabilidade_percentual)
    print(resultado.pareceres_advogados["trabalhista"].parecer)
    ```
    """
    
    def __init__(
        self,
        max_workers_paralelo: int = 5
    ):
        """
        Inicializa o Orquestrador de An√°lise de Peti√ß√µes.
        
        Args:
            max_workers_paralelo: N√∫mero m√°ximo de threads para execu√ß√£o paralela (padr√£o: 5)
        """
        logger.info("üöÄ Inicializando Orquestrador de An√°lise de Peti√ß√µes...")
        
        # Gerenciadores
        self.gerenciador_peticoes = obter_gerenciador_estado_peticoes()
        
        # Cliente e Collection do ChromaDB (tupla)
        self.cliente_chromadb, self.collection_chromadb = obter_servico_banco_vetorial()
        
        # Agentes especializados (inst√¢ncias √∫nicas)
        self.agente_estrategista = AgenteEstrategistaProcessual()
        self.agente_prognostico = AgentePrognostico()
        self.servico_geracao_documento: ServicoGeracaoDocumento = obter_servico_geracao_documento()
        
        # Configura√ß√µes
        self.max_workers_paralelo = max_workers_paralelo
        
        logger.info(
            f"‚úÖ Orquestrador de Peti√ß√µes inicializado | "
            f"Max workers: {self.max_workers_paralelo} | "
            f"Advogados dispon√≠veis: {list(MAPA_ADVOGADOS_ESPECIALISTAS.keys())} | "
            f"Peritos dispon√≠veis: {list(MAPA_PERITOS.keys())}"
        )
    
    async def analisar_peticao_completa(
        self,
        peticao_id: str,
        advogados_selecionados: List[str],
        peritos_selecionados: List[str]
    ) -> ResultadoAnaliseProcesso:
        """
        Analisa peti√ß√£o inicial de forma completa com todos os agentes selecionados.
        
        CONTEXTO:
        Esta √© a FUN√á√ÉO PRINCIPAL do orquestrador. Coordena todo o fluxo:
        1. Recuperar peti√ß√£o e documentos do ChromaDB
        2. Montar contexto RAG completo
        3. Executar advogados especialistas em PARALELO
        4. Executar peritos em PARALELO
        5. Executar Estrategista Processual (com pareceres compilados)
        6. Executar Agente de Progn√≥stico (com contexto completo)
        7. Compilar resultado completo
        8. Atualizar estado da peti√ß√£o (CONCLUIDA)
        
        FAIXAS DE PROGRESSO:
        - 0-10%: Recuperando dados da peti√ß√£o
        - 10-20%: Montando contexto RAG
        - 20-50%: Executando advogados especialistas (paralelo)
        - 50-70%: Executando peritos t√©cnicos (paralelo)
        - 70-80%: Elaborando estrat√©gia processual
        - 80-90%: Calculando progn√≥stico e cen√°rios
        - 90-100%: Finalizando an√°lise
        
        Args:
            peticao_id: ID √∫nico da peti√ß√£o
            advogados_selecionados: Lista de advogados especialistas (ex: ["trabalhista", "civel"])
            peritos_selecionados: Lista de peritos t√©cnicos (ex: ["medico", "seguranca_trabalho"])
        
        Returns:
            ResultadoAnaliseProcesso: Resultado completo estruturado
        
        Raises:
            ValueError: Se peti√ß√£o n√£o existir ou dados inv√°lidos
            RuntimeError: Se erro cr√≠tico durante an√°lise
        """
        timestamp_inicio = datetime.now()
        
        try:
            # ===== ETAPA 1: VALIDA√á√ÉO E RECUPERA√á√ÉO DE DADOS (0-10%) =====
            logger.info(f"üìã Iniciando an√°lise completa da peti√ß√£o {peticao_id}")
            
            self._atualizar_progresso(
                peticao_id=peticao_id,
                etapa="Recuperando dados da peti√ß√£o",
                progresso=5
            )
            
            # Validar que peti√ß√£o existe
            peticao = self.gerenciador_peticoes.obter_peticao(peticao_id)
            if not peticao:
                raise ValueError(f"Peti√ß√£o {peticao_id} n√£o encontrada")
            
            # Atualizar status para PROCESSANDO
            self.gerenciador_peticoes.atualizar_status(
                peticao_id=peticao_id,
                status=StatusPeticao.PROCESSANDO
            )
            
            logger.info(
                f"‚úÖ Peti√ß√£o recuperada | "
                f"Tipo: {peticao.tipo_acao} | "
                f"Documentos enviados: {len(peticao.documentos_enviados)}"
            )
            
            # ===== ETAPA 2: MONTAR CONTEXTO RAG (10-20%) =====
            self._atualizar_progresso(
                peticao_id=peticao_id,
                etapa="Montando contexto RAG completo",
                progresso=15
            )
            
            contexto_completo = self._montar_contexto_rag(peticao)
            
            logger.info(
                f"‚úÖ Contexto RAG montado | "
                f"Documentos: {contexto_completo['numero_documentos']} | "
                f"Chunks: {len(contexto_completo['documentos_texto'])}"
            )
            
            # ===== ETAPA 3: EXECUTAR ADVOGADOS ESPECIALISTAS (20-50%) =====
            self._atualizar_progresso(
                peticao_id=peticao_id,
                etapa="Executando advogados especialistas (paralelo)",
                progresso=25
            )
            
            pareceres_advogados = self._executar_advogados_paralelo(
                advogados_selecionados=advogados_selecionados,
                contexto=contexto_completo
            )
            
            logger.info(
                f"‚úÖ Advogados conclu√≠dos | "
                f"Solicitados: {len(advogados_selecionados)} | "
                f"Bem-sucedidos: {len(pareceres_advogados)}"
            )
            
            # ===== ETAPA 4: EXECUTAR PERITOS T√âCNICOS (50-70%) =====
            self._atualizar_progresso(
                peticao_id=peticao_id,
                etapa="Executando peritos t√©cnicos (paralelo)",
                progresso=55
            )
            
            pareceres_peritos = self._executar_peritos_paralelo(
                peritos_selecionados=peritos_selecionados,
                contexto=contexto_completo
            )
            
            logger.info(
                f"‚úÖ Peritos conclu√≠dos | "
                f"Solicitados: {len(peritos_selecionados)} | "
                f"Bem-sucedidos: {len(pareceres_peritos)}"
            )
            
            # ===== ETAPA 5: ELABORAR ESTRAT√âGIA PROCESSUAL (70-80%) =====
            self._atualizar_progresso(
                peticao_id=peticao_id,
                etapa="Elaborando estrat√©gia processual",
                progresso=75
            )
            
            proximos_passos = self._executar_estrategista(
                peticao=peticao,
                contexto=contexto_completo,
                pareceres_advogados=pareceres_advogados,
                pareceres_peritos=pareceres_peritos
            )
            
            logger.info(
                f"‚úÖ Estrat√©gia elaborada | "
                f"Pr√≥ximos passos: {len(proximos_passos.passos)}"
            )
            
            # ===== ETAPA 6: CALCULAR PROGN√ìSTICO (80-90%) =====
            self._atualizar_progresso(
                peticao_id=peticao_id,
                etapa="Calculando progn√≥stico e cen√°rios",
                progresso=85
            )
            
            prognostico = self._executar_prognostico(
                peticao=peticao,
                contexto=contexto_completo,
                pareceres_advogados=pareceres_advogados,
                pareceres_peritos=pareceres_peritos,
                proximos_passos=proximos_passos
            )
            
            logger.info(
                f"‚úÖ Progn√≥stico calculado | "
                f"Cen√°rios: {len(prognostico.cenarios)} | "
                f"Recomenda√ß√£o: {prognostico.recomendacao_geral[:100]}..."
            )
            
            documento_continuacao: Optional[DocumentoContinuacao] = None

            self._atualizar_progresso(
                peticao_id=peticao_id,
                etapa="Gerando documento de continua√ß√£o",
                progresso=90
            )

            try:
                documento_continuacao = self._gerar_documento_continuacao(
                    peticao=peticao,
                    contexto=contexto_completo,
                    proximos_passos=proximos_passos,
                    prognostico=prognostico,
                    pareceres_advogados=pareceres_advogados,
                    pareceres_peritos=pareceres_peritos
                )

                if documento_continuacao is not None:
                    logger.info(
                        "‚úÖ Documento de continua√ß√£o gerado | Tipo: %s",
                        documento_continuacao.tipo_peca.value
                    )
            except Exception as erro:
                logger.error(
                    "‚ö†Ô∏è Falha ao gerar documento de continua√ß√£o: %s",
                    erro,
                    exc_info=True
                )
                documento_continuacao = None

            # ===== ETAPA 7: COMPILAR RESULTADO (90-100%) =====
            self._atualizar_progresso(
                peticao_id=peticao_id,
                etapa="Finalizando an√°lise",
                progresso=95
            )
            
            timestamp_conclusao = datetime.now()
            
            resultado = ResultadoAnaliseProcesso(
                peticao_id=peticao_id,
                proximos_passos=proximos_passos,
                prognostico=prognostico,
                pareceres_advogados=pareceres_advogados,
                pareceres_peritos=pareceres_peritos,
                documento_continuacao=documento_continuacao,
                timestamp_conclusao=timestamp_conclusao
            )
            
            # Registrar resultado no gerenciador
            self.gerenciador_peticoes.registrar_resultado(
                peticao_id=peticao_id,
                resultado=resultado
            )
            
            tempo_total = (timestamp_conclusao - timestamp_inicio).total_seconds()
            
            logger.info(
                f"üéâ An√°lise completa conclu√≠da | "
                f"Peti√ß√£o: {peticao_id} | "
                f"Tempo total: {tempo_total:.2f}s | "
                f"Advogados: {len(pareceres_advogados)} | "
                f"Peritos: {len(pareceres_peritos)} | "
                f"Cen√°rios: {len(prognostico.cenarios)}"
            )
            
            self._atualizar_progresso(
                peticao_id=peticao_id,
                etapa="An√°lise conclu√≠da",
                progresso=100
            )
            
            return resultado
        
        except Exception as erro:
            logger.error(f"‚ùå Erro na an√°lise da peti√ß√£o {peticao_id}: {erro}", exc_info=True)
            
            # Registrar erro no gerenciador
            self.gerenciador_peticoes.registrar_erro(
                peticao_id=peticao_id,
                mensagem_erro=f"Erro durante an√°lise: {str(erro)}"
            )
            
            raise RuntimeError(f"Falha na an√°lise da peti√ß√£o: {str(erro)}") from erro
    
    def _montar_contexto_rag(self, peticao: Peticao) -> Dict[str, Any]:
        """
        Monta contexto RAG completo da peti√ß√£o.
        
        CONTEXTO:
        Recupera a peti√ß√£o inicial e todos os documentos complementares enviados
        do ChromaDB, construindo um contexto unificado para os agentes.
        
        Args:
            peticao: Objeto Peticao com IDs dos documentos
        
        Returns:
            Dict contendo:
            - peticao_texto: Texto da peti√ß√£o inicial
            - documentos_texto: Lista de textos dos documentos complementares
            - numero_documentos: Total de documentos (1 peti√ß√£o + N complementares)
            - tipo_acao: Tipo da a√ß√£o jur√≠dica
        """
        try:
            logger.info(f"üîç Recuperando documentos da peti√ß√£o do RAG...")
            
            # Recuperar peti√ß√£o inicial
            # NOTA: obter_documento_por_id retorna dict com "documents" (lista de chunks),
            # n√£o "texto_completo". Precisamos concatenar os chunks.
            doc_peticao = obter_documento_por_id(
                collection=self.collection_chromadb,
                documento_id=peticao.documento_peticao_id
            )
            if not doc_peticao or doc_peticao.get("count", 0) == 0:
                raise ValueError(f"Documento da peti√ß√£o {peticao.documento_peticao_id} n√£o encontrado no RAG")
            
            # Concatenar chunks da peti√ß√£o para formar texto completo
            chunks_peticao = doc_peticao.get("documents", [])
            peticao_texto = "\n\n".join(chunks_peticao)
            
            logger.debug(f"Peti√ß√£o recuperada: {doc_peticao.get('count', 0)} chunks, {len(peticao_texto)} chars")
            
            # Recuperar documentos complementares
            documentos_texto = []
            for doc_id in peticao.documentos_enviados:
                doc = obter_documento_por_id(
                    collection=self.collection_chromadb,
                    documento_id=doc_id
                )
                if doc and doc.get("count", 0) > 0:
                    # Concatenar chunks do documento
                    chunks_doc = doc.get("documents", [])
                    texto_doc = "\n\n".join(chunks_doc)
                    documentos_texto.append(texto_doc)
                    logger.debug(f"Documento complementar {doc_id}: {doc.get('count', 0)} chunks")
                else:
                    logger.warning(f"‚ö†Ô∏è Documento {doc_id} n√£o encontrado no RAG")
            
            contexto = {
                "peticao_texto": peticao_texto,
                "documentos_texto": documentos_texto,
                "numero_documentos": 1 + len(documentos_texto),
                "tipo_acao": peticao.tipo_acao
            }
            
            # Validar que o contexto foi montado corretamente
            if not peticao_texto or peticao_texto.strip() == "":
                logger.error("‚ùå Peti√ß√£o vazia recuperada do RAG!")
                raise ValueError("Texto da peti√ß√£o inicial est√° vazio")
            
            logger.info(
                f"‚úÖ Contexto RAG montado | "
                f"Peti√ß√£o: {len(peticao_texto)} chars | "
                f"Documentos: {len(documentos_texto)}"
            )
            
            return contexto
        
        except Exception as erro:
            logger.error(f"‚ùå Erro ao montar contexto RAG: {erro}")
            raise
    
    def _executar_advogados_paralelo(
        self,
        advogados_selecionados: List[str],
        contexto: Dict[str, Any]
    ) -> Dict[str, ParecerAdvogado]:
        """
        Executa advogados especialistas em paralelo.
        
        CONTEXTO:
        Usa ThreadPoolExecutor para executar m√∫ltiplos advogados simultaneamente,
        reduzindo o tempo total de an√°lise. Tratamento robusto de erros: se um
        advogado falhar, continua com os outros.
        
        Args:
            advogados_selecionados: Lista de IDs de advogados (ex: ["trabalhista", "civel"])
            contexto: Contexto RAG completo
        
        Returns:
            Dict mapeando ID do advogado para seu ParecerAdvogado
        """
        if not advogados_selecionados:
            logger.info("‚ÑπÔ∏è Nenhum advogado especialista selecionado")
            return {}
        
        logger.info(f"üëî Executando {len(advogados_selecionados)} advogados em paralelo...")
        
        pareceres = {}
        
        with ThreadPoolExecutor(max_workers=self.max_workers_paralelo) as executor:
            # Criar futures para cada advogado
            futures = {}
            for advogado_id in advogados_selecionados:
                if advogado_id not in MAPA_ADVOGADOS_ESPECIALISTAS:
                    logger.warning(f"‚ö†Ô∏è Advogado '{advogado_id}' n√£o reconhecido, ignorando")
                    continue
                
                # Instanciar agente
                classe_agente = MAPA_ADVOGADOS_ESPECIALISTAS[advogado_id]
                agente = classe_agente()
                
                # Submeter execu√ß√£o
                future = executor.submit(
                    self._executar_agente_advogado,
                    agente=agente,
                    advogado_id=advogado_id,
                    contexto=contexto
                )
                futures[future] = advogado_id
            
            # Coletar resultados conforme concluem
            advogados_concluidos = 0
            total_advogados = len(advogados_selecionados)
            
            for future in as_completed(futures):
                advogado_id = futures[future]
                try:
                    parecer = future.result()
                    pareceres[advogado_id] = parecer
                    advogados_concluidos += 1
                    
                    # Atualizar progresso incremental (20% ‚Üí 50%)
                    progresso_parcial = 20 + int((advogados_concluidos / total_advogados) * 30)
                    logger.info(f"‚úÖ Advogado '{advogado_id}' conclu√≠do ({advogados_concluidos}/{total_advogados})")
                    
                except Exception as erro:
                    logger.error(f"‚ùå Erro no advogado '{advogado_id}': {erro}")
                    # Continua com os outros advogados
        
        logger.info(f"‚úÖ Advogados conclu√≠dos: {len(pareceres)}/{len(advogados_selecionados)}")
        return pareceres
    
    def _executar_agente_advogado(
        self,
        agente: Any,
        advogado_id: str,
        contexto: Dict[str, Any]
    ) -> ParecerAdvogado:
        """
        Executa um agente advogado espec√≠fico.
        
        Args:
            agente: Inst√¢ncia do agente advogado
            advogado_id: ID do advogado (para logging)
            contexto: Contexto RAG completo
        
        Returns:
            ParecerAdvogado gerado pelo agente
        """
        logger.info(f"üëî Executando advogado '{advogado_id}'...")
        logger.info(f"‚è≥ Chamando LLM para an√°lise jur√≠dica (pode demorar 1-3 minutos)...")
        
        # Montar prompt gen√©rico para an√°lise da peti√ß√£o
        prompt = (
            f"Analise a peti√ß√£o inicial sob a √≥tica do {agente.descricao_do_agente}. "
            f"Tipo de a√ß√£o: {contexto['tipo_acao']}. "
            f"Identifique riscos, oportunidades, fundamentos legais e recomenda√ß√µes espec√≠ficas."
        )
        
        # Chamar m√©todo processar() do agente (m√©todo correto da classe AgenteBase)
        # NOTA: processar() retorna Dict[str, Any] com a estrutura:
        # {
        #     "agente": str,
        #     "parecer": str,  ‚Üê texto da an√°lise aqui
        #     "confianca": float,
        #     "timestamp": str,
        #     "modelo_utilizado": str,
        #     "metadados": dict
        # }
        resultado_processamento = agente.processar(
            contexto_de_documentos=[contexto["peticao_texto"]] + contexto["documentos_texto"],
            pergunta_do_usuario=prompt,
            metadados_adicionais={"tipo_acao": contexto["tipo_acao"]}
        )
        
        # Extrair o texto do parecer do dicion√°rio retornado
        parecer_texto = resultado_processamento.get("parecer", "")
        
        if not parecer_texto:
            logger.warning(f"Parecer vazio retornado pelo agente {advogado_id}")
            parecer_texto = "An√°lise n√£o dispon√≠vel"
        
        # Converter resposta texto em ParecerAdvogado estruturado
        # TODO: Parsear JSON da resposta do LLM para extrair campos estruturados
        parecer = ParecerAdvogado(
            tipo_advogado=advogado_id,
            analise_juridica=parecer_texto,
            fundamentos_legais=[],  # TODO: extrair do parecer
            riscos_identificados=[],  # TODO: extrair do parecer
            recomendacoes=[]  # TODO: extrair do parecer
        )
        
        return parecer
    
    def _executar_peritos_paralelo(
        self,
        peritos_selecionados: List[str],
        contexto: Dict[str, Any]
    ) -> Dict[str, ParecerPerito]:
        """
        Executa peritos t√©cnicos em paralelo.
        
        CONTEXTO:
        Similar a _executar_advogados_paralelo, mas para peritos t√©cnicos.
        Execu√ß√£o paralela com tratamento robusto de erros.
        
        Args:
            peritos_selecionados: Lista de IDs de peritos (ex: ["medico", "seguranca_trabalho"])
            contexto: Contexto RAG completo
        
        Returns:
            Dict mapeando ID do perito para seu ParecerPerito
        """
        if not peritos_selecionados:
            logger.info("‚ÑπÔ∏è Nenhum perito t√©cnico selecionado")
            return {}
        
        logger.info(f"üî¨ Executando {len(peritos_selecionados)} peritos em paralelo...")
        
        pareceres = {}
        
        with ThreadPoolExecutor(max_workers=self.max_workers_paralelo) as executor:
            # Criar futures para cada perito
            futures = {}
            for perito_id in peritos_selecionados:
                if perito_id not in MAPA_PERITOS:
                    logger.warning(f"‚ö†Ô∏è Perito '{perito_id}' n√£o reconhecido, ignorando")
                    continue
                
                # Instanciar agente
                classe_agente = MAPA_PERITOS[perito_id]
                agente = classe_agente()
                
                # Submeter execu√ß√£o
                future = executor.submit(
                    self._executar_agente_perito,
                    agente=agente,
                    perito_id=perito_id,
                    contexto=contexto
                )
                futures[future] = perito_id
            
            # Coletar resultados conforme concluem
            peritos_concluidos = 0
            total_peritos = len(peritos_selecionados)
            
            for future in as_completed(futures):
                perito_id = futures[future]
                try:
                    parecer = future.result()
                    pareceres[perito_id] = parecer
                    peritos_concluidos += 1
                    
                    # Atualizar progresso incremental (50% ‚Üí 70%)
                    progresso_parcial = 50 + int((peritos_concluidos / total_peritos) * 20)
                    logger.info(f"‚úÖ Perito '{perito_id}' conclu√≠do ({peritos_concluidos}/{total_peritos})")
                    
                except Exception as erro:
                    logger.error(f"‚ùå Erro no perito '{perito_id}': {erro}")
                    # Continua com os outros peritos
        
        logger.info(f"‚úÖ Peritos conclu√≠dos: {len(pareceres)}/{len(peritos_selecionados)}")
        return pareceres
    
    def _executar_agente_perito(
        self,
        agente: Any,
        perito_id: str,
        contexto: Dict[str, Any]
    ) -> ParecerPerito:
        """
        Executa um agente perito espec√≠fico.
        
        Args:
            agente: Inst√¢ncia do agente perito
            perito_id: ID do perito (para logging)
            contexto: Contexto RAG completo
        
        Returns:
            ParecerPerito gerado pelo agente
        """
        logger.info(f"üî¨ Executando perito '{perito_id}'...")
        logger.info(f"‚è≥ Chamando LLM para an√°lise t√©cnica (pode demorar 1-3 minutos)...")
        
        # Montar prompt gen√©rico para an√°lise t√©cnica
        prompt = (
            f"Analise os documentos sob a √≥tica t√©cnica de {agente.descricao_do_agente}. "
            f"Tipo de a√ß√£o: {contexto['tipo_acao']}. "
            f"Identifique aspectos t√©cnicos relevantes, riscos e recomenda√ß√µes."
        )
        
        # Chamar m√©todo processar() do agente (m√©todo correto da classe AgenteBase)
        # NOTA: processar() retorna Dict[str, Any] com a estrutura:
        # {
        #     "agente": str,
        #     "parecer": str,  ‚Üê texto da an√°lise t√©cnica aqui
        #     "confianca": float,
        #     "timestamp": str,
        #     "modelo_utilizado": str,
        #     "metadados": dict
        # }
        resultado_processamento = agente.processar(
            contexto_de_documentos=[contexto["peticao_texto"]] + contexto["documentos_texto"],
            pergunta_do_usuario=prompt,
            metadados_adicionais={"tipo_acao": contexto["tipo_acao"]}
        )
        
        # Extrair o texto do parecer do dicion√°rio retornado
        parecer_texto = resultado_processamento.get("parecer", "")
        
        if not parecer_texto:
            logger.warning(f"Parecer t√©cnico vazio retornado pelo agente {perito_id}")
            parecer_texto = "An√°lise t√©cnica n√£o dispon√≠vel"
        
        # Converter resposta texto em ParecerPerito estruturado
        # TODO: Parsear JSON da resposta do LLM para extrair campos estruturados
        parecer = ParecerPerito(
            tipo_perito=perito_id,
            analise_tecnica=parecer_texto,
            conclusoes=[],  # TODO: extrair do parecer
            recomendacoes_tecnicas=[]  # TODO: extrair do parecer
        )
        
        return parecer
    
    def _executar_estrategista(
        self,
        peticao: Peticao,
        contexto: Dict[str, Any],
        pareceres_advogados: Dict[str, ParecerAdvogado],
        pareceres_peritos: Dict[str, ParecerPerito]
    ) -> ProximosPassos:
        """
        Executa Agente Estrategista Processual.
        
        CONTEXTO:
        Agente recebe contexto completo (peti√ß√£o + documentos + pareceres de todos
        os especialistas) e elabora plano de a√ß√£o estrat√©gico com pr√≥ximos passos.
        
        Args:
            peticao: Objeto Peticao
            contexto: Contexto RAG completo
            pareceres_advogados: Pareceres dos advogados especialistas
            pareceres_peritos: Pareceres dos peritos t√©cnicos
        
        Returns:
            ProximosPassos elaborados pelo estrategista
        """
        logger.info("üìã Executando Agente Estrategista Processual...")
        
        try:
            # DEBUG: Verificar chaves do contexto recebido
            logger.debug(f"Contexto recebido no estrategista - chaves: {list(contexto.keys())}")
            logger.debug(f"peticao_texto presente? {'peticao_texto' in contexto}")
            logger.debug(f"Tamanho peticao_texto: {len(contexto.get('peticao_texto', ''))}")
            
            # ‚úÖ OTIMIZA√á√ÉO: Compilar apenas RESUMOS dos pareceres (economiza ~70% tokens)
            # Estrategista precisa de conclus√µes, n√£o an√°lise completa linha-por-linha
            pareceres_compilados = self._compilar_pareceres_para_dict(
                pareceres_advogados=pareceres_advogados,
                pareceres_peritos=pareceres_peritos,
                resumido=True  # ‚ö° Envia resumos ao inv√©s de texto completo
            )
            
            # Montar contexto completo para o estrategista
            # Nota: agente_estrategista.analisar() espera:
            #   - "peticao_inicial" (str)
            #   - "documentos" (List[str])
            #   - "pareceres" (Dict[str, str])
            #   - "tipo_acao" (str, opcional)
            contexto_estrategista = {
                "peticao_inicial": contexto.get("peticao_texto", ""),
                "documentos": contexto.get("documentos_texto", []) if isinstance(contexto.get("documentos_texto"), list) else [contexto.get("documentos_texto", "")],
                "tipo_acao": contexto.get("tipo_acao", ""),
                "pareceres": pareceres_compilados
            }
            
            # Executar agente
            proximos_passos = self.agente_estrategista.analisar(contexto_estrategista)
            
            logger.info(
                f"‚úÖ Estrat√©gia elaborada | "
                f"Passos: {len(proximos_passos.passos)} | "
                f"Caminhos alternativos: {len(proximos_passos.caminhos_alternativos)}"
            )
            
            return proximos_passos
        
        except Exception as erro:
            logger.error(f"‚ùå Erro no Estrategista: {erro}")
            raise
    
    def _executar_prognostico(
        self,
        peticao: Peticao,
        contexto: Dict[str, Any],
        pareceres_advogados: Dict[str, ParecerAdvogado],
        pareceres_peritos: Dict[str, ParecerPerito],
        proximos_passos: ProximosPassos
    ) -> Prognostico:
        """
        Executa Agente de Progn√≥stico.
        
        CONTEXTO:
        Agente recebe contexto COMPLETO (peti√ß√£o + documentos + pareceres + estrat√©gia)
        e gera progn√≥stico probabil√≠stico de cen√°rios com valores e prazos.
        
        Args:
            peticao: Objeto Peticao
            contexto: Contexto RAG completo
            pareceres_advogados: Pareceres dos advogados especialistas
            pareceres_peritos: Pareceres dos peritos t√©cnicos
            proximos_passos: Pr√≥ximos passos elaborados pelo estrategista
        
        Returns:
            Prognostico com cen√°rios probabil√≠sticos
        """
        logger.info("üìä Executando Agente de Progn√≥stico...")
        
        try:
            # ‚úÖ OTIMIZA√á√ÉO: Compilar apenas RESUMOS dos pareceres (economiza ~70% tokens)
            # Progn√≥stico n√£o precisa reprocessar an√°lise completa, s√≥ conclus√µes
            pareceres_compilados = self._compilar_pareceres_para_dict(
                pareceres_advogados=pareceres_advogados,
                pareceres_peritos=pareceres_peritos,
                resumido=True  # ‚ö° Envia resumos ao inv√©s de texto completo
            )
            
            # Montar contexto completo para o progn√≥stico
            # Nota: agente_prognostico.analisar() espera:
            #   - "peticao_inicial" (str)
            #   - "documentos" (List[str])
            #   - "pareceres" (Dict[str, str])
            #   - "estrategia" (Dict, opcional)
            #   - "tipo_acao" (str, opcional)
            contexto_prognostico = {
                "peticao_inicial": contexto.get("peticao_texto", ""),
                "documentos": contexto.get("documentos_texto", []) if isinstance(contexto.get("documentos_texto"), list) else [contexto.get("documentos_texto", "")],
                "tipo_acao": contexto.get("tipo_acao", ""),
                "pareceres": pareceres_compilados,
                "estrategia": {
                    "estrategia_recomendada": proximos_passos.estrategia_recomendada,
                    "proximos_passos": [
                        f"{passo.numero}. {passo.descricao} (Prazo: {passo.prazo_estimado})"
                        for passo in proximos_passos.passos
                    ]
                }
            }
            
            # Executar agente
            prognostico = self.agente_prognostico.analisar(contexto_prognostico)
            
            logger.info(
                f"‚úÖ Progn√≥stico calculado | "
                f"Cen√°rios: {len(prognostico.cenarios)} | "
                f"Soma probabilidades: {sum(c.probabilidade_percentual for c in prognostico.cenarios)}%"
            )
            
            return prognostico
        
        except Exception as erro:
            logger.error(f"‚ùå Erro no Progn√≥stico: {erro}")
            raise
    
    def _gerar_documento_continuacao(
        self,
        peticao: Peticao,
        contexto: Dict[str, Any],
        proximos_passos: ProximosPassos,
        prognostico: Prognostico,
        pareceres_advogados: Dict[str, ParecerAdvogado],
        pareceres_peritos: Dict[str, ParecerPerito]
    ) -> Optional[DocumentoContinuacao]:
        """Gera o documento de continua√ß√£o usando o servi√ßo dedicado."""

        if not self.servico_geracao_documento:
            logger.warning("Servi√ßo de gera√ß√£o de documentos n√£o dispon√≠vel")
            return None

        documentos_texto = contexto.get("documentos_texto") or []
        if not isinstance(documentos_texto, list):
            documentos_texto = [documentos_texto]

        contexto_documento = {
            "peticao_inicial": contexto.get("peticao_texto", ""),
            "documentos": documentos_texto,
            "pareceres_advogados": pareceres_advogados,
            "pareceres_peritos": pareceres_peritos,
            "proximos_passos": proximos_passos,
            "prognostico": prognostico,
            "tipo_acao": contexto.get("tipo_acao") or peticao.tipo_acao,
        }

        return self.servico_geracao_documento.gerar_documento_continuacao(contexto_documento)

    def _compilar_pareceres_para_texto(
        self,
        pareceres_advogados: Dict[str, ParecerAdvogado],
        pareceres_peritos: Dict[str, ParecerPerito]
    ) -> str:
        """
        Compila pareceres de advogados e peritos em texto unificado.
        
        DESCONTINUADO: Use _compilar_pareceres_para_dict() para agentes
        que esperam Dict[str, str].
        
        Args:
            pareceres_advogados: Pareceres dos advogados
            pareceres_peritos: Pareceres dos peritos
        
        Returns:
            String com todos os pareceres formatados
        """
        linhas = []
        
        # Advogados
        if pareceres_advogados:
            linhas.append("=== PARECERES DOS ADVOGADOS ESPECIALISTAS ===\n")
            for advogado_id, parecer in pareceres_advogados.items():
                linhas.append(f"--- {advogado_id.upper()} ---")
                linhas.append(parecer.parecer)
                linhas.append("")
        
        # Peritos
        if pareceres_peritos:
            linhas.append("=== PARECERES DOS PERITOS T√âCNICOS ===\n")
            for perito_id, parecer in pareceres_peritos.items():
                linhas.append(f"--- {perito_id.upper()} ---")
                linhas.append(parecer.parecer)
                linhas.append("")
        
        return "\n".join(linhas)
    
    def _compilar_pareceres_para_dict(
        self,
        pareceres_advogados: Dict[str, ParecerAdvogado],
        pareceres_peritos: Dict[str, ParecerPerito],
        resumido: bool = False
    ) -> Dict[str, str]:
        """
        Compila pareceres de advogados e peritos em dicion√°rio.
        
        CONTEXTO:
        Agentes Estrategista e Progn√≥stico esperam pareceres como Dict[str, str],
        onde a chave √© o identificador do especialista e o valor √© o parecer.
        
        OTIMIZA√á√ÉO IMPORTANTE:
        Quando `resumido=True`, envia apenas CONCLUS√ïES ao inv√©s do texto completo
        (economiza ~70% de tokens). Use para agente de Progn√≥stico que n√£o precisa
        reprocessar toda a an√°lise detalhada, apenas as conclus√µes.
        
        Args:
            pareceres_advogados: Pareceres dos advogados
            pareceres_peritos: Pareceres dos peritos
            resumido: Se True, envia apenas conclus√µes (n√£o texto completo)
        
        Returns:
            Dict[str, str] com pareceres (completos ou resumidos)
            
        EXEMPLO:
        {
            "advogado_trabalhista": "An√°lise trabalhista completa..." (ou resumo),
            "perito_medico": "Parecer m√©dico t√©cnico..." (ou resumo),
            ...
        }
        """
        pareceres_dict = {}
        
        if resumido:
            # ‚úÖ MODO RESUMIDO: Apenas conclus√µes essenciais (economiza ~70% tokens)
            # Ideal para agente de Progn√≥stico que s√≥ precisa de conclus√µes
            
            for advogado_id, parecer in pareceres_advogados.items():
                resumo_partes = [
                    f"### {parecer.tipo_advogado}",
                    "",
                    "**Riscos:**"
                ]
                for risco in (parecer.riscos_identificados or [])[:3]:  # Max 3 riscos
                    resumo_partes.append(f"- {risco[:150]}")
                
                resumo_partes.append("")
                resumo_partes.append("**Recomenda√ß√µes:**")
                for rec in (parecer.recomendacoes or [])[:3]:  # Max 3 recomenda√ß√µes
                    resumo_partes.append(f"- {rec[:150]}")
                
                if parecer.fundamentos_legais:
                    resumo_partes.append("")
                    resumo_partes.append(f"**Fundamentos:** {', '.join(parecer.fundamentos_legais[:5])}")
                
                pareceres_dict[advogado_id] = "\n".join(resumo_partes)
            
            for perito_id, parecer in pareceres_peritos.items():
                resumo_partes = [
                    f"### {parecer.tipo_perito}",
                    "",
                    "**Conclus√µes:**"
                ]
                for conclusao in (parecer.conclusoes or [])[:4]:  # Max 4 conclus√µes
                    resumo_partes.append(f"- {conclusao[:200]}")
                
                if parecer.recomendacoes_tecnicas:
                    resumo_partes.append("")
                    resumo_partes.append("**Recomenda√ß√µes T√©cnicas:**")
                    for rec in (parecer.recomendacoes_tecnicas or [])[:3]:  # Max 3 recomenda√ß√µes
                        resumo_partes.append(f"- {rec[:150]}")
                
                pareceres_dict[perito_id] = "\n".join(resumo_partes)
        
        else:
            # ‚ùå MODO COMPLETO: Texto integral (verboso, ~milhares de tokens)
            # Use apenas quando agente precisa reprocessar an√°lise detalhada
            
            for advogado_id, parecer in pareceres_advogados.items():
                pareceres_dict[advogado_id] = parecer.analise_juridica
            
            for perito_id, parecer in pareceres_peritos.items():
                pareceres_dict[perito_id] = parecer.analise_tecnica
        
        return pareceres_dict
    
    def _atualizar_progresso(
        self,
        peticao_id: str,
        etapa: str,
        progresso: int
    ) -> None:
        """
        Atualiza progresso da an√°lise no gerenciador de estado.
        
        CONTEXTO:
        Similar ao GerenciadorEstadoTarefas (TAREFA-030), permite que
        clientes fa√ßam polling do progresso da an√°lise.
        
        Args:
            peticao_id: ID da peti√ß√£o
            etapa: Descri√ß√£o da etapa atual
            progresso: Progresso percentual (0-100)
        """
        # Implementa√ß√£o futura: usar GerenciadorEstadoPeticoes.atualizar_progresso()
        # Por enquanto, apenas log
        logger.info(f"üìä Progresso {peticao_id}: {progresso}% - {etapa}")


# ==============================================================================
# FUN√á√ÉO FACTORY (PADR√ÉO SINGLETON)
# ==============================================================================

@lru_cache(maxsize=1)
def criar_orquestrador_analise_peticoes() -> OrquestradorAnalisePeticoes:
    """
    Factory para criar inst√¢ncia singleton do Orquestrador de An√°lise de Peti√ß√µes.
    
    PADR√ÉO SINGLETON:
    Garante que exista apenas uma inst√¢ncia do orquestrador em toda a aplica√ß√£o.
    Isso evita m√∫ltiplas inst√¢ncias dos agentes e melhora performance.
    
    Returns:
        OrquestradorAnalisePeticoes: Inst√¢ncia singleton
    
    EXEMPLO:
    ```python
    from servicos.orquestrador_analise_peticoes import criar_orquestrador_analise_peticoes
    
    orquestrador = criar_orquestrador_analise_peticoes()
    resultado = await orquestrador.analisar_peticao_completa(...)
    ```
    """
    logger.info("üè≠ Factory: Criando OrquestradorAnalisePeticoes (singleton)...")
    return OrquestradorAnalisePeticoes()


# ==============================================================================
# FUN√á√ÉO AUXILIAR PARA OBTER ORQUESTRADOR
# ==============================================================================

def obter_orquestrador_analise_peticoes() -> OrquestradorAnalisePeticoes:
    """
    Obt√©m inst√¢ncia singleton do Orquestrador de An√°lise de Peti√ß√µes.
    
    CONVEN√á√ÉO:
    Segue o padr√£o obter_* usado em todo o projeto (obter_gerenciador_estado_peticoes,
    obter_servico_banco_vetorial, etc.)
    
    Returns:
        OrquestradorAnalisePeticoes: Inst√¢ncia singleton
    """
    return criar_orquestrador_analise_peticoes()
