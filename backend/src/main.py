"""
Aplica√ß√£o Principal - Plataforma Jur√≠dica Multi-Agent

CONTEXTO DE NEG√ìCIO:
Este √© o entry point (ponto de entrada) de toda a aplica√ß√£o backend.
Ele inicializa o servidor FastAPI, configura middlewares (CORS, logging),
registra rotas e prepara a aplica√ß√£o para receber requisi√ß√µes HTTP.

ESTRUTURA:
1. Importa√ß√µes e configura√ß√£o inicial
2. Cria√ß√£o da aplica√ß√£o FastAPI
3. Configura√ß√£o de middlewares (CORS)
4. Registro de rotas (endpoints)
5. Event handlers (startup/shutdown)
6. Fun√ß√£o main para rodar o servidor

PADR√ÉO DE EXECU√á√ÉO:
```bash
# Modo desenvolvimento (com hot reload):
python src/main.py

# Modo produ√ß√£o (via uvicorn CLI):
uvicorn src.main:app --host 0.0.0.0 --port 8000
```

JUSTIFICATIVA PARA LLMs:
- Arquivo centralizado: toda a configura√ß√£o da app em um lugar
- Coment√°rios explicam "porqu√™" de cada configura√ß√£o
- Separa√ß√£o clara de responsabilidades (rotas em m√≥dulos separados)
"""

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
import uvicorn
from datetime import datetime

# Importa√ß√£o das configura√ß√µes
from configuracao.configuracoes import obter_configuracoes

# ===== CARREGAR CONFIGURA√á√ïES =====

# Obt√©m inst√¢ncia singleton de configura√ß√µes
# Se faltar alguma vari√°vel obrigat√≥ria no .env, a aplica√ß√£o falha aqui (fail-fast)
configuracoes = obter_configuracoes()


# ===== LIFESPAN CONTEXT MANAGER =====

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gerenciador de contexto do ciclo de vida da aplica√ß√£o.
    
    CONTEXTO:
    FastAPI (vers√µes recentes) usa lifespan para gerenciar eventos de startup/shutdown.
    Substituiu os antigos decoradores @app.on_event("startup").
    
    O QUE ACONTECE AQUI:
    - ANTES do yield: Executado quando a aplica√ß√£o INICIA
      (ex: conectar banco de dados, inicializar recursos)
    - DEPOIS do yield: Executado quando a aplica√ß√£o ENCERRA
      (ex: fechar conex√µes, liberar recursos)
    
    IMPLEMENTA√á√ÉO:
    Por enquanto, apenas logamos eventos. Em tarefas futuras, aqui ser√° feito:
    - Inicializa√ß√£o do ChromaDB
    - Verifica√ß√£o de conectividade com OpenAI API
    - Cria√ß√£o de pastas necess√°rias (logs, chroma_db)
    """
    # ===== STARTUP =====
    print("=" * 60)
    print("üöÄ INICIANDO PLATAFORMA JUR√çDICA MULTI-AGENT")
    print("=" * 60)
    print(f"üìÖ Data/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåç Ambiente: {configuracoes.AMBIENTE}")
    print(f"üîó Host: {configuracoes.HOST}:{configuracoes.PORT}")
    print(f"ü§ñ Modelo LLM: {configuracoes.OPENAI_MODEL_ANALISE}")
    print(f"üìä Modelo Embedding: {configuracoes.OPENAI_MODEL_EMBEDDING}")
    print(f"üíæ ChromaDB Path: {configuracoes.CHROMA_DB_PATH}")
    print(f"üìù Log Level: {configuracoes.LOG_LEVEL}")
    print("=" * 60)
    
    # TODO (TAREFA FUTURA): Inicializar ChromaDB aqui
    # TODO (TAREFA FUTURA): Verificar conectividade com OpenAI
    # TODO (TAREFA FUTURA): Criar pastas necess√°rias
    
    print("‚úÖ Aplica√ß√£o iniciada com sucesso!")
    print("üìñ Documenta√ß√£o interativa: http://localhost:8000/docs")
    print("=" * 60)
    
    yield  # Aplica√ß√£o roda aqui (entre startup e shutdown)
    
    # ===== SHUTDOWN =====
    print("=" * 60)
    print("üõë ENCERRANDO PLATAFORMA JUR√çDICA MULTI-AGENT")
    print("=" * 60)
    
    # TODO (TAREFA FUTURA): Fechar conex√µes com ChromaDB
    # TODO (TAREFA FUTURA): Salvar estado se necess√°rio
    
    print("‚úÖ Aplica√ß√£o encerrada com sucesso!")
    print("=" * 60)


# ===== CRIA√á√ÉO DA APLICA√á√ÉO FASTAPI =====

app = FastAPI(
    # T√≠tulo da API (aparece na documenta√ß√£o Swagger)
    title="Plataforma Jur√≠dica Multi-Agent",
    
    # Descri√ß√£o da API (aparece na documenta√ß√£o Swagger)
    description="""
    API REST para an√°lise jur√≠dica usando sistema multi-agent com IA.
    
    **Funcionalidades principais:**
    - Upload e processamento de documentos jur√≠dicos (PDF, DOCX, imagens)
    - Extra√ß√£o de texto com OCR (Tesseract)
    - Armazenamento em base vetorial (ChromaDB) para RAG
    - An√°lise multi-agent (Advogado, Peritos M√©dicos, Peritos de Seguran√ßa)
    - Gera√ß√£o de pareceres t√©cnicos automatizados
    
    **Desenvolvido seguindo o padr√£o "Manutenibilidade por LLM".**
    """,
    
    # Vers√£o da API (versionamento sem√¢ntico)
    version="0.1.0",
    
    # URL base para a documenta√ß√£o
    docs_url="/docs",  # Swagger UI
    redoc_url="/redoc",  # ReDoc (documenta√ß√£o alternativa)
    
    # Lifespan para gerenciar startup/shutdown
    lifespan=lifespan
)


# ===== CONFIGURA√á√ÉO DE MIDDLEWARES =====

# Middleware de CORS (Cross-Origin Resource Sharing)
# 
# CONTEXTO:
# Frontend (React) roda em uma origem diferente do backend (ex: localhost:3000 vs localhost:8000)
# Navegadores bloqueiam requisi√ß√µes "cross-origin" por seguran√ßa.
# CORS permite que o backend especifique quais origens podem fazer requisi√ß√µes.
#
# IMPLEMENTA√á√ÉO:
app.add_middleware(
    CORSMiddleware,
    
    # Lista de origens permitidas (URLs do frontend)
    # Em development: localhost em v√°rias portas
    # Em production: apenas dom√≠nios reais do frontend
    allow_origins=configuracoes.obter_lista_cors_origins(),
    
    # Permitir envio de cookies e credenciais
    # True = necess√°rio para autentica√ß√£o (quando implementarmos)
    allow_credentials=True,
    
    # M√©todos HTTP permitidos
    # ["*"] = permite todos (GET, POST, PUT, DELETE, etc.)
    allow_methods=["*"],
    
    # Headers permitidos
    # ["*"] = permite todos os headers customizados
    allow_headers=["*"],
)


# ===== TRATAMENTO GLOBAL DE ERROS =====

@app.exception_handler(Exception)
async def tratador_global_de_excecoes(request: Request, exc: Exception):
    """
    Tratador global de exce√ß√µes n√£o capturadas.
    
    CONTEXTO:
    Se algum endpoint lan√ßar uma exce√ß√£o que n√£o foi tratada,
    este handler captura e retorna uma resposta JSON padronizada
    em vez de expor o stack trace completo (seguran√ßa).
    
    IMPLEMENTA√á√ÉO:
    Em development: retorna mensagem detalhada (para debugging)
    Em production: retorna mensagem gen√©rica (seguran√ßa)
    
    Args:
        request: Objeto Request do FastAPI
        exc: Exce√ß√£o lan√ßada
    
    Returns:
        JSONResponse com erro formatado
    """
    mensagem_erro = str(exc) if configuracoes.esta_em_desenvolvimento() else "Erro interno do servidor"
    
    return JSONResponse(
        status_code=500,
        content={
            "erro": "InternalServerError",
            "mensagem": mensagem_erro,
            "timestamp": datetime.now().isoformat(),
            "path": str(request.url)
        }
    )


# ===== ROTAS / ENDPOINTS =====

@app.get("/")
async def raiz():
    """
    Endpoint raiz - Informa√ß√µes b√°sicas da API.
    
    CONTEXTO:
    Rota simples para verificar se a API est√° respondendo.
    Retorna metadados sobre a API (vers√£o, ambiente, status).
    
    Returns:
        dict: Informa√ß√µes da API
    """
    return {
        "aplicacao": "Plataforma Jur√≠dica Multi-Agent",
        "versao": "0.1.0",
        "ambiente": configuracoes.AMBIENTE,
        "status": "operacional",
        "documentacao": "/docs",
        "timestamp": datetime.now().isoformat()
    }


@app.get("/health")
async def health_check():
    """
    Health Check - Verifica sa√∫de da aplica√ß√£o.
    
    CONTEXTO DE NEG√ìCIO:
    Endpoint usado por ferramentas de monitoramento (ex: Kubernetes, Docker)
    para verificar se a aplica√ß√£o est√° saud√°vel e pronta para receber tr√°fego.
    
    IMPLEMENTA√á√ÉO:
    Por enquanto, retorna status b√°sico. Em tarefas futuras, ser√° expandido para:
    - Verificar conectividade com OpenAI API
    - Verificar se ChromaDB est√° acess√≠vel
    - Verificar espa√ßo em disco dispon√≠vel
    - Verificar se Tesseract est√° instalado
    
    Returns:
        dict: Status de sa√∫de da aplica√ß√£o
        
    Status HTTP:
        200: Aplica√ß√£o saud√°vel
        503 (futuro): Aplica√ß√£o com problemas (indispon√≠vel)
    """
    # TODO (TAREFA FUTURA): Adicionar verifica√ß√µes de depend√™ncias externas
    # - await verificar_conectividade_openai()
    # - await verificar_chroma_db_acessivel()
    # - verificar_tesseract_instalado()
    
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "ambiente": configuracoes.AMBIENTE,
        "versao": "0.1.0",
        "servicos": {
            "api": "operacional",
            # "openai": "A VERIFICAR",      # TODO
            # "chromadb": "A VERIFICAR",    # TODO
            # "tesseract": "A VERIFICAR"    # TODO
        }
    }


# ===== REGISTRO DE ROTAS =====

# TAREFA-003: Rotas de documentos (upload e gest√£o)
from api.rotas_documentos import router as router_documentos
app.include_router(router_documentos)

# TODO (TAREFA-004): Importar e registrar rotas de an√°lise
# from api.rotas_analise import router as router_analise
# app.include_router(router_analise, prefix="/api/analise", tags=["An√°lise Multi-Agent"])


# ===== FUN√á√ÉO MAIN (ENTRY POINT) =====

if __name__ == "__main__":
    """
    Entry point quando executar: python src/main.py
    
    CONTEXTO:
    Inicia o servidor Uvicorn diretamente do Python.
    √ötil para desenvolvimento r√°pido.
    
    Em produ√ß√£o, preferir rodar via CLI:
    uvicorn src.main:app --host 0.0.0.0 --port 8000 --workers 4
    """
    uvicorn.run(
        # String "main:app" para permitir hot reload
        # Se passar app diretamente, reload n√£o funciona
        "main:app",
        
        host=configuracoes.HOST,
        port=configuracoes.PORT,
        
        # Hot reload (apenas em development)
        # Recarrega servidor automaticamente ao detectar mudan√ßas no c√≥digo
        reload=configuracoes.UVICORN_RELOAD,
        
        # N√≠vel de log do Uvicorn
        log_level=configuracoes.LOG_LEVEL.lower(),
        
        # Acessar vari√°veis de ambiente
        # Necess√°rio para hot reload funcionar corretamente
        reload_dirs=["./src"] if configuracoes.UVICORN_RELOAD else None
    )
