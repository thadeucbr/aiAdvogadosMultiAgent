"""
Rotas de An√°lise Multi-Agent - API REST

CONTEXTO DE NEG√ìCIO:
Este m√≥dulo implementa os endpoints para an√°lise jur√≠dica multi-agent.
√â o ponto de entrada HTTP para consultas que envolvem o sistema de agentes
(Advogado Coordenador + Peritos Especializados + Advogados Especialistas).

ENDPOINTS:
1. POST /api/analise/multi-agent
   - Recebe prompt do usu√°rio, agentes (peritos) e advogados selecionados
   - Orquestra an√°lise completa via OrquestradorMultiAgent
   - Retorna resposta compilada + pareceres individuais (peritos + advogados)

2. GET /api/analise/peritos
   - Lista peritos dispon√≠veis no sistema (an√°lise t√©cnica)
   - Frontend usa para popular UI de sele√ß√£o de peritos

3. GET /api/analise/advogados (NOVO TAREFA-024)
   - Lista advogados especialistas dispon√≠veis (an√°lise jur√≠dica)
   - Frontend usa para popular UI de sele√ß√£o de advogados especialistas

4. GET /api/analise/health
   - Health check do m√≥dulo de an√°lise
   - Verifica se orquestrador est√° funcional

FLUXO DE AN√ÅLISE MULTI-AGENT (ATUALIZADO TAREFA-024):
1. Frontend ‚Üí POST /api/analise/multi-agent {
     "prompt": "...", 
     "agentes_selecionados": ["medico"],
     "advogados_selecionados": ["trabalhista", "previdenciario"]
   }
2. Endpoint valida request (Pydantic)
3. Endpoint chama OrquestradorMultiAgent.processar_consulta()
4. Orquestrador coordena: 
   RAG ‚Üí Peritos (an√°lise t√©cnica) ‚Üí Advogados (an√°lise jur√≠dica) ‚Üí Compila√ß√£o
5. Endpoint formata resposta e retorna ao frontend
6. Frontend exibe resposta compilada + pareceres individuais (peritos E advogados)

TRATAMENTO DE ERROS:
- Valida√ß√£o Pydantic: 422 Unprocessable Entity
- Prompt inv√°lido: 400 Bad Request
- Erro no orquestrador: 500 Internal Server Error
- Timeout: 504 Gateway Timeout

RESPONSABILIDADES:
- Validar entrada (Pydantic)
- Chamar orquestrador
- Formatar resposta
- Tratar erros
- Logging

N√ÉO FAZ:
- L√≥gica de an√°lise (responsabilidade do Orquestrador)
- Chamadas LLM diretas (responsabilidade dos Agentes)
- Acesso ao RAG (responsabilidade do AgenteAdvogado)

PADR√ÉO DE CAMADAS:
API (este arquivo) ‚Üí Servi√ßo (Orquestrador) ‚Üí Dom√≠nio (Agentes) ‚Üí Infraestrutura (LLM, RAG)

TAREFAS RELACIONADAS:
- TAREFA-009: Infraestrutura Base para Agentes
- TAREFA-010: Agente Advogado Coordenador
- TAREFA-011: Agente Perito M√©dico
- TAREFA-012: Agente Perito Seguran√ßa do Trabalho
- TAREFA-013: Orquestrador Multi-Agent
- TAREFA-014: Endpoint de An√°lise Multi-Agent
- TAREFA-024: Refatora√ß√£o para Advogados Especialistas (ESTE UPDATE)
"""

from fastapi import APIRouter, HTTPException, status, BackgroundTasks
from fastapi.responses import JSONResponse
import logging
from typing import Dict, Any
from datetime import datetime
import asyncio
import uuid

# Importar modelos Pydantic
from src.api.modelos import (
    RequestAnaliseMultiAgent,
    RespostaAnaliseMultiAgent,
    ParecerIndividualPerito,
    ParecerIndividualAdvogado,
    InformacaoPerito,
    InformacaoAdvogado,
    RespostaListarPeritos,
    RespostaListarAdvogados,
    RespostaErro,
    RequestIniciarAnalise,
    RespostaIniciarAnalise,
    RespostaStatusAnalise,
    RespostaResultadoAnalise
)

# Importar orquestrador multi-agent
from src.agentes.orquestrador_multi_agent import (
    criar_orquestrador,
    OrquestradorMultiAgent,
    StatusConsulta
)

# Importar exce√ß√µes customizadas
from src.utilitarios.gerenciador_llm import (
    ErroLimiteTaxaExcedido,
    ErroTimeoutAPI,
    ErroGeralAPI
)

# Importar gerenciador de estado de tarefas (TAREFA-030)
from src.servicos.gerenciador_estado_tarefas import (
    obter_gerenciador_estado_tarefas,
    StatusTarefa
)


# ===== CONFIGURA√á√ÉO DO LOGGER =====

logger = logging.getLogger(__name__)


# ===== CRIA√á√ÉO DO ROUTER =====

router = APIRouter(
    prefix="/api/analise",
    tags=["An√°lise Multi-Agent"],
    responses={
        500: {
            "model": RespostaErro,
            "description": "Erro interno do servidor"
        }
    }
)


# ===== INST√ÇNCIA GLOBAL DO ORQUESTRADOR =====

# DESIGN: Singleton pattern
# JUSTIFICATIVA: Orquestrador mant√©m estado (cache de consultas) e inst√¢ncia
# do AgenteAdvogado (que j√° tem peritos registrados). Criar uma nova inst√¢ncia
# a cada requisi√ß√£o seria ineficiente.
# 
# NOTA: Em produ√ß√£o com m√∫ltiplos workers, usar Redis/DB para estado compartilhado.
_orquestrador_global: OrquestradorMultiAgent | None = None


def obter_orquestrador() -> OrquestradorMultiAgent:
    """
    Obt√©m inst√¢ncia singleton do orquestrador multi-agent.
    
    CONTEXTO:
    Lazy initialization: s√≥ cria o orquestrador na primeira chamada.
    Reutiliza a mesma inst√¢ncia em requisi√ß√µes subsequentes.
    
    THREAD-SAFETY:
    N√£o √© thread-safe. Em produ√ß√£o com m√∫ltiplos workers, cada worker
    ter√° sua pr√≥pria inst√¢ncia. Para compartilhar estado entre workers,
    migrar cache do orquestrador para Redis.
    
    Returns:
        Inst√¢ncia do OrquestradorMultiAgent
    """
    global _orquestrador_global
    
    if _orquestrador_global is None:
        logger.info("üîß Inicializando orquestrador multi-agent (primeira requisi√ß√£o)")
        _orquestrador_global = criar_orquestrador()
        logger.info("‚úÖ Orquestrador inicializado e pronto para uso")
    
    return _orquestrador_global


# ===== DADOS EST√ÅTICOS DOS PERITOS =====

# CONTEXTO: Informa√ß√µes sobre peritos dispon√≠veis
# JUSTIFICATIVA: Dados est√°ticos para endpoint GET /api/analise/peritos
# 
# TODO (TAREFA FUTURA): Migrar para banco de dados ou buscar dinamicamente
# do AgenteAdvogado.listar_peritos_disponiveis()
INFORMACOES_PERITOS = {
    "medico": {
        "id_perito": "medico",
        "nome_exibicao": "Perito M√©dico",
        "descricao": "Especialista em an√°lise m√©dica pericial para casos trabalhistas e c√≠veis. "
                    "Realiza avalia√ß√£o de nexo causal entre doen√ßas e trabalho, grau de "
                    "incapacidade (tempor√°ria/permanente), danos corporais e sequelas.",
        "especialidades": [
            "Nexo causal entre doen√ßa e trabalho",
            "Avalia√ß√£o de incapacidades (tempor√°rias e permanentes)",
            "Danos corporais e sequelas",
            "An√°lise de laudos m√©dicos e atestados",
            "Per√≠cia de invalidez e aposentadoria por invalidez"
        ]
    },
    "seguranca_trabalho": {
        "id_perito": "seguranca_trabalho",
        "nome_exibicao": "Perito de Seguran√ßa do Trabalho",
        "descricao": "Especialista em an√°lise de condi√ß√µes de trabalho, conformidade com "
                    "Normas Regulamentadoras (NRs), uso de EPIs/EPCs, riscos ocupacionais, "
                    "investiga√ß√£o de acidentes e caracteriza√ß√£o de insalubridade/periculosidade.",
        "especialidades": [
            "An√°lise de conformidade com Normas Regulamentadoras (NRs)",
            "Avalia√ß√£o de uso e adequa√ß√£o de EPIs/EPCs",
            "Investiga√ß√£o de acidentes de trabalho",
            "Caracteriza√ß√£o de insalubridade e periculosidade",
            "An√°lise de riscos ocupacionais (f√≠sicos, qu√≠micos, biol√≥gicos, ergon√¥micos)",
            "Avalia√ß√£o de condi√ß√µes ambientais de trabalho"
        ]
    }
}


# ===== DADOS EST√ÅTICOS DOS ADVOGADOS ESPECIALISTAS (TAREFA-024) =====

# CONTEXTO: Informa√ß√µes sobre advogados especialistas dispon√≠veis
# JUSTIFICATIVA: Dados est√°ticos para endpoint GET /api/analise/advogados
# 
# TODO (TAREFA FUTURA): Migrar para banco de dados ou buscar dinamicamente
# do AgenteAdvogado.listar_advogados_especialistas_disponiveis()
# 
# NOTA: Estes advogados ainda n√£o foram implementados (TAREFAS 025-028).
# Quando forem implementados, eles aparecer√£o automaticamente se registrados
# no criar_advogado_coordenador().
INFORMACOES_ADVOGADOS = {
    "trabalhista": {
        "id_advogado": "trabalhista",
        "nome_exibicao": "Advogado Trabalhista",
        "area_especializacao": "Direito do Trabalho",
        "descricao": "Especialista em an√°lise jur√≠dica trabalhista. Avalia v√≠nculos empregat√≠cios, "
                    "verbas rescis√≥rias, justa causa, horas extras, adicional noturno, dano moral "
                    "trabalhista, ass√©dio e conformidade com CLT e s√∫mulas do TST.",
        "legislacao_principal": [
            "CLT (Consolida√ß√£o das Leis do Trabalho)",
            "S√∫mulas do TST (Tribunal Superior do Trabalho)",
            "OJ (Orienta√ß√µes Jurisprudenciais) da SDI-1 do TST",
            "Lei 13.467/2017 (Reforma Trabalhista)",
            "Lei 8.213/91 (Benef√≠cios Previdenci√°rios relacionados ao trabalho)"
        ]
    },
    "previdenciario": {
        "id_advogado": "previdenciario",
        "nome_exibicao": "Advogado Previdenci√°rio",
        "area_especializacao": "Direito Previdenci√°rio",
        "descricao": "Especialista em an√°lise jur√≠dica previdenci√°ria. Avalia concess√£o de benef√≠cios "
                    "INSS (aux√≠lio-doen√ßa, aposentadoria por invalidez, BPC/LOAS), nexo causal para "
                    "benef√≠cios acident√°rios, tempo de contribui√ß√£o, car√™ncia e requisitos legais.",
        "legislacao_principal": [
            "Lei 8.213/91 (Plano de Benef√≠cios da Previd√™ncia Social)",
            "Lei 8.212/91 (Custeio da Previd√™ncia Social)",
            "Decreto 3.048/99 (Regulamento da Previd√™ncia Social)",
            "Lei 8.742/93 (LOAS - Benef√≠cio de Presta√ß√£o Continuada)",
            "S√∫mulas e Jurisprud√™ncia do TNU e TRFs"
        ]
    },
    "civel": {
        "id_advogado": "civel",
        "nome_exibicao": "Advogado C√≠vel",
        "area_especializacao": "Direito C√≠vel",
        "descricao": "Especialista em an√°lise jur√≠dica c√≠vel. Avalia responsabilidade civil, danos "
                    "materiais e morais, contratos (cl√°usulas, validade, inadimplemento), direito "
                    "do consumidor e quest√µes obrigacionais.",
        "legislacao_principal": [
            "C√≥digo Civil (Lei 10.406/2002)",
            "C√≥digo de Defesa do Consumidor (Lei 8.078/90)",
            "C√≥digo de Processo Civil (Lei 13.105/2015)",
            "S√∫mulas do STJ sobre responsabilidade civil e contratos"
        ]
    },
    "tributario": {
        "id_advogado": "tributario",
        "nome_exibicao": "Advogado Tribut√°rio",
        "area_especializacao": "Direito Tribut√°rio",
        "descricao": "Especialista em an√°lise jur√≠dica tribut√°ria. Avalia fato gerador, base de c√°lculo "
                    "de tributos (ICMS, PIS/COFINS, IRPJ, CSLL), execu√ß√£o fiscal, defesa administrativa "
                    "e judicial, bitributa√ß√£o e planejamento tribut√°rio.",
        "legislacao_principal": [
            "C√≥digo Tribut√°rio Nacional (Lei 5.172/66)",
            "Constitui√ß√£o Federal (arts. 145 a 162 - Sistema Tribut√°rio Nacional)",
            "Lei Complementar 123/2006 (Simples Nacional)",
            "S√∫mulas do STJ e STF sobre mat√©ria tribut√°ria"
        ]
    }
}


# ==============================================================================
# ENDPOINTS
# ==============================================================================

@router.post(
    "/multi-agent",
    response_model=RespostaAnaliseMultiAgent,
    status_code=status.HTTP_200_OK,
    summary="Realizar an√°lise jur√≠dica multi-agent",
    description="""
    Realiza an√°lise jur√≠dica usando sistema multi-agent.
    
    **Fluxo:**
    1. Recebe prompt do usu√°rio, agentes selecionados e (opcionalmente) documentos espec√≠ficos
    2. Consulta base de conhecimento (RAG) para documentos relevantes
    3. Se documento_ids fornecido, busca apenas nesses documentos espec√≠ficos
    4. Delega an√°lise para peritos especializados selecionados
    5. Compila resposta final integrando pareceres dos peritos
    
    **Agentes Dispon√≠veis:**
    - `medico`: Perito M√©dico (nexo causal, incapacidades, danos corporais)
    - `seguranca_trabalho`: Perito de Seguran√ßa do Trabalho (NRs, EPIs, riscos)
    
    **Sele√ß√£o de Documentos (NOVO - TAREFA-022):**
    √â poss√≠vel agora selecionar quais documentos espec√≠ficos devem ser usados na an√°lise:
    - Se `documento_ids` for `null` ou vazio: busca em TODOS os documentos
    - Se `documento_ids` for fornecido: busca APENAS nos documentos especificados
    
    **Exemplo de Request (todos os documentos):**
    ```json
    {
      "prompt": "Analisar se houve nexo causal entre o acidente e as condi√ß√µes de trabalho",
      "agentes_selecionados": ["medico", "seguranca_trabalho"]
    }
    ```
    
    **Exemplo de Request (documentos espec√≠ficos):**
    ```json
    {
      "prompt": "Analisar se houve nexo causal entre o acidente e as condi√ß√µes de trabalho",
      "agentes_selecionados": ["medico", "seguranca_trabalho"],
      "documento_ids": ["550e8400-e29b-41d4-a716-446655440000", "6ba7b810-9dad-11d1-80b4-00c04fd430c8"]
    }
    ```
    
    **Tempo de Processamento:**
    Pode levar de 30 a 60 segundos dependendo da complexidade e n√∫mero de agentes.
    
    **Limita√ß√µes:**
    - M√°ximo de 5000 caracteres no prompt
    - Timeout de 60 segundos por agente
    - Consulta √∫nica (n√£o suporta streaming de resposta)
    """,
    responses={
        200: {
            "description": "An√°lise conclu√≠da com sucesso",
            "model": RespostaAnaliseMultiAgent
        },
        400: {
            "description": "Request inv√°lida (prompt vazio, agentes inv√°lidos)",
            "model": RespostaErro
        },
        422: {
            "description": "Valida√ß√£o Pydantic falhou",
        },
        500: {
            "description": "Erro interno durante processamento",
            "model": RespostaErro
        },
        504: {
            "description": "Timeout durante processamento",
            "model": RespostaErro
        }
    }
)
async def endpoint_analise_multi_agent(
    request_body: RequestAnaliseMultiAgent
) -> RespostaAnaliseMultiAgent:
    """
    Endpoint POST /api/analise/multi-agent
    
    Processa consulta jur√≠dica usando sistema multi-agent.
    
    FLUXO INTERNO:
    1. Valida√ß√£o autom√°tica do request via Pydantic
    2. Obter inst√¢ncia do orquestrador
    3. Chamar orquestrador.processar_consulta() (ass√≠ncrono)
    4. Formatar resultado para RespostaAnaliseMultiAgent
    5. Retornar resposta ao cliente
    
    TRATAMENTO DE ERROS:
    - ValueError: Valida√ß√£o falhou (400)
    - ErroLimiteTaxaExcedido: OpenAI rate limit (429 ‚Üí 500)
    - ErroTimeoutAPI: Timeout (504)
    - asyncio.TimeoutError: Timeout geral (504)
    - Exception gen√©rica: Erro interno (500)
    
    Args:
        request_body: RequestAnaliseMultiAgent validado pelo Pydantic
        
    Returns:
        RespostaAnaliseMultiAgent com resultado completo da an√°lise
        
    Raises:
        HTTPException: Em caso de erro (400, 500, 504)
    """
    logger.info("=" * 60)
    logger.info("üîç NOVA REQUISI√á√ÉO DE AN√ÅLISE MULTI-AGENT")
    logger.info("=" * 60)
    logger.info(f"Prompt: {request_body.prompt[:100]}...")  # Log primeiros 100 caracteres
    logger.info(f"Agentes selecionados: {request_body.agentes_selecionados}")
    logger.info(f"Documentos filtrados: {len(request_body.documento_ids) if request_body.documento_ids else 'Todos'}")
    
    try:
        # ===== OBTER INST√ÇNCIA DO ORQUESTRADOR =====
        orquestrador = obter_orquestrador()
        
        # ===== PROCESSAR CONSULTA (ASS√çNCRONO) =====
        logger.info("üöÄ Iniciando processamento via OrquestradorMultiAgent...")
        
        # NOVIDADE (TAREFA-022): Passa documento_ids para o orquestrador
        resultado_orquestrador = await orquestrador.processar_consulta(
            prompt=request_body.prompt,
            agentes_selecionados=request_body.agentes_selecionados,
            documento_ids=request_body.documento_ids
        )
        
        logger.info("‚úÖ Processamento conclu√≠do com sucesso!")
        
        # ===== FORMATAR RESPOSTA =====
        
        # Extrair pareceres individuais dos peritos
        pareceres_formatados = []
        if "pareceres_individuais" in resultado_orquestrador:
            for parecer_dict in resultado_orquestrador["pareceres_individuais"]:
                parecer_formatado = ParecerIndividualPerito(
                    nome_agente=parecer_dict.get("nome_agente", "Desconhecido"),
                    tipo_agente=parecer_dict.get("tipo_agente", "desconhecido"),
                    parecer=parecer_dict.get("parecer", ""),
                    grau_confianca=parecer_dict.get("grau_confianca", 0.0),
                    documentos_referenciados=parecer_dict.get("documentos_referenciados", []),
                    timestamp=parecer_dict.get("timestamp", datetime.now().isoformat())
                )
                pareceres_formatados.append(parecer_formatado)
        
        # Construir resposta final
        resposta = RespostaAnaliseMultiAgent(
            sucesso=True,
            id_consulta=resultado_orquestrador.get("id_consulta", ""),
            resposta_compilada=resultado_orquestrador.get("resposta_compilada", ""),
            pareceres_individuais=pareceres_formatados,
            documentos_consultados=resultado_orquestrador.get("documentos_consultados", []),
            agentes_utilizados=resultado_orquestrador.get("agentes_utilizados", []),
            tempo_total_segundos=resultado_orquestrador.get("tempo_total_segundos", 0.0),
            timestamp_inicio=resultado_orquestrador.get("timestamp_inicio", ""),
            timestamp_fim=resultado_orquestrador.get("timestamp_fim", ""),
            mensagem_erro=None
        )
        
        logger.info(f"üìä Estat√≠sticas da an√°lise:")
        logger.info(f"   - ID Consulta: {resposta.id_consulta}")
        logger.info(f"   - Agentes utilizados: {resposta.agentes_utilizados}")
        logger.info(f"   - Documentos consultados: {len(resposta.documentos_consultados)}")
        logger.info(f"   - Tempo total: {resposta.tempo_total_segundos:.2f}s")
        logger.info("=" * 60)
        
        return resposta
        
    except ValueError as erro_validacao:
        # Erro de valida√ß√£o (ex: agentes inv√°lidos)
        logger.error(f"‚ùå Erro de valida√ß√£o: {str(erro_validacao)}")
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(erro_validacao)
        )
        
    except ErroLimiteTaxaExcedido as erro_rate_limit:
        # OpenAI rate limit excedido
        logger.error(f"‚ùå Rate limit excedido: {str(erro_rate_limit)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Limite de taxa da API OpenAI excedido. Tente novamente em alguns instantes."
        )
        
    except (ErroTimeoutAPI, asyncio.TimeoutError) as erro_timeout:
        # Timeout durante processamento
        logger.error(f"‚è±Ô∏è Timeout durante processamento: {str(erro_timeout)}")
        raise HTTPException(
            status_code=status.HTTP_504_GATEWAY_TIMEOUT,
            detail="Timeout durante processamento. A consulta est√° muito complexa ou "
                   "os agentes demoraram muito para responder. Tente simplificar o prompt."
        )
        
    except Exception as erro_geral:
        # Erro gen√©rico
        logger.exception("üí• Erro inesperado durante processamento:")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro interno durante processamento: {str(erro_geral)}"
        )


@router.get(
    "/peritos",
    response_model=RespostaListarPeritos,
    status_code=status.HTTP_200_OK,
    summary="Listar peritos dispon√≠veis",
    description="""
    Lista todos os agentes peritos dispon√≠veis no sistema.
    
    **Uso:**
    Frontend consulta este endpoint para saber quais peritos pode
    selecionar ao fazer uma an√°lise multi-agent.
    
    **Informa√ß√µes Retornadas:**
    - ID do perito (para usar em `agentes_selecionados`)
    - Nome para exibi√ß√£o na UI
    - Descri√ß√£o das compet√™ncias
    - Lista de especialidades
    
    **Exemplo de Response:**
    ```json
    {
      "sucesso": true,
      "total_peritos": 2,
      "peritos": [
        {
          "id_perito": "medico",
          "nome_exibicao": "Perito M√©dico",
          "descricao": "Especialista em an√°lise m√©dica pericial...",
          "especialidades": ["Nexo causal", "Incapacidades", ...]
        }
      ]
    }
    ```
    """,
    responses={
        200: {
            "description": "Lista de peritos retornada com sucesso",
            "model": RespostaListarPeritos
        },
        500: {
            "description": "Erro ao listar peritos",
            "model": RespostaErro
        }
    }
)
async def endpoint_listar_peritos() -> RespostaListarPeritos:
    """
    Endpoint GET /api/analise/peritos
    
    Lista todos os peritos dispon√≠veis no sistema.
    
    IMPLEMENTA√á√ÉO ATUAL:
    Retorna dados est√°ticos do dicion√°rio INFORMACOES_PERITOS.
    
    TODO (TAREFA FUTURA):
    Migrar para busca din√¢mica via orquestrador.agente_advogado.listar_peritos_disponiveis()
    ou banco de dados.
    
    Returns:
        RespostaListarPeritos com lista de peritos dispon√≠veis
        
    Raises:
        HTTPException: Em caso de erro (500)
    """
    logger.info("üìã Requisi√ß√£o para listar peritos dispon√≠veis")
    
    try:
        # Converter dicion√°rio est√°tico para lista de InformacaoPerito
        lista_peritos = [
            InformacaoPerito(**info)
            for info in INFORMACOES_PERITOS.values()
        ]
        
        resposta = RespostaListarPeritos(
            sucesso=True,
            total_peritos=len(lista_peritos),
            peritos=lista_peritos
        )
        
        logger.info(f"‚úÖ Listagem conclu√≠da: {len(lista_peritos)} perito(s) dispon√≠vel(is)")
        return resposta
        
    except Exception as erro:
        logger.exception("üí• Erro ao listar peritos:")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro ao listar peritos: {str(erro)}"
        )


@router.get(
    "/advogados",
    response_model=RespostaListarAdvogados,
    status_code=status.HTTP_200_OK,
    summary="Listar advogados especialistas dispon√≠veis (TAREFA-024)",
    description="""
    Lista todos os advogados especialistas dispon√≠veis no sistema.
    
    **Contexto (TAREFA-024):**
    Advogados especialistas fornecem an√°lise jur√≠dica sob perspectivas de √°reas
    espec√≠ficas do direito (Trabalhista, Previdenci√°rio, C√≠vel, Tribut√°rio).
    
    **Diferen√ßa para Peritos:**
    - **Peritos**: an√°lise T√âCNICA (m√©dica, engenharia de seguran√ßa)
    - **Advogados**: an√°lise JUR√çDICA (leis, s√∫mulas, jurisprud√™ncia)
    
    **Uso:**
    Frontend usa este endpoint para popular checkboxes de sele√ß√£o de advogados
    especialistas na interface de an√°lise multi-agent.
    
    **Advogados Dispon√≠veis:**
    - **Trabalhista**: CLT, verbas rescis√≥rias, justa causa, horas extras
    - **Previdenci√°rio**: Benef√≠cios INSS, aposentadorias, nexo causal previdenci√°rio
    - **C√≠vel**: Responsabilidade civil, contratos, direito do consumidor
    - **Tribut√°rio**: ICMS, IRPJ, execu√ß√£o fiscal, planejamento tribut√°rio
    
    **NOTA:**
    Os advogados especialistas ainda n√£o foram implementados (TAREFAS 025-028).
    Este endpoint retorna informa√ß√µes est√°ticas preparadas para quando
    os advogados forem criados.
    
    **Exemplo de Resposta:**
    ```json
    {
      "sucesso": true,
      "total_advogados": 4,
      "advogados": [
        {
          "id_advogado": "trabalhista",
          "nome_exibicao": "Advogado Trabalhista",
          "area_especializacao": "Direito do Trabalho",
          "descricao": "Especialista em CLT...",
          "legislacao_principal": ["CLT", "S√∫mulas TST", ...]
        }
      ]
    }
    ```
    """,
    responses={
        200: {
            "description": "Lista de advogados especialistas retornada com sucesso",
            "model": RespostaListarAdvogados
        },
        500: {
            "description": "Erro ao listar advogados especialistas",
            "model": RespostaErro
        }
    }
)
async def endpoint_listar_advogados() -> RespostaListarAdvogados:
    """
    Endpoint GET /api/analise/advogados (TAREFA-024)
    
    Lista todos os advogados especialistas dispon√≠veis no sistema.
    
    CONTEXTO:
    Este endpoint foi criado na TAREFA-024 para suportar a expans√£o do sistema
    multi-agent com advogados especialistas. √â an√°logo ao endpoint /api/analise/peritos,
    mas focado em agentes que fornecem an√°lise jur√≠dica especializada.
    
    IMPLEMENTA√á√ÉO ATUAL:
    Retorna dados est√°ticos do dicion√°rio INFORMACOES_ADVOGADOS.
    
    TODO (TAREFAS 025-028):
    Quando os advogados especialistas forem implementados, este endpoint pode
    migrar para busca din√¢mica via:
    orquestrador.agente_advogado.listar_advogados_especialistas_disponiveis()
    
    Returns:
        RespostaListarAdvogados com lista de advogados especialistas dispon√≠veis
        
    Raises:
        HTTPException: Em caso de erro (500)
    """
    logger.info("üìã Requisi√ß√£o para listar advogados especialistas dispon√≠veis (TAREFA-024)")
    
    try:
        # Converter dicion√°rio est√°tico para lista de InformacaoAdvogado
        lista_advogados = [
            InformacaoAdvogado(**info)
            for info in INFORMACOES_ADVOGADOS.values()
        ]
        
        resposta = RespostaListarAdvogados(
            sucesso=True,
            total_advogados=len(lista_advogados),
            advogados=lista_advogados
        )
        
        logger.info(
            f"‚úÖ Listagem de advogados conclu√≠da: {len(lista_advogados)} advogado(s) dispon√≠vel(is) | "
            f"IDs: {[adv.id_advogado for adv in lista_advogados]}"
        )
        return resposta
        
    except Exception as erro:
        logger.exception("üí• Erro ao listar advogados especialistas:")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro ao listar advogados especialistas: {str(erro)}"
        )


@router.get(
    "/health",
    status_code=status.HTTP_200_OK,
    summary="Health check do m√≥dulo de an√°lise",
    description="""
    Verifica se o m√≥dulo de an√°lise multi-agent est√° operacional.
    
    **Verifica√ß√µes:**
    - Orquestrador est√° inicializado
    - Agente Advogado est√° operacional
    - Peritos est√£o registrados
    
    **Uso:**
    Monitoramento e valida√ß√£o antes de submeter an√°lises.
    """,
    responses={
        200: {
            "description": "M√≥dulo de an√°lise operacional"
        },
        503: {
            "description": "M√≥dulo de an√°lise indispon√≠vel"
        }
    }
)
async def endpoint_health_check_analise() -> Dict[str, Any]:
    """
    Endpoint GET /api/analise/health
    
    Health check do m√≥dulo de an√°lise multi-agent.
    
    VERIFICA√á√ïES:
    1. Orquestrador pode ser instanciado
    2. Agente Advogado est√° funcional
    3. Peritos est√£o registrados
    
    Returns:
        Dict com status e informa√ß√µes do sistema
        
    Raises:
        HTTPException: 503 se alguma verifica√ß√£o falhar
    """
    logger.info("üè• Health check do m√≥dulo de an√°lise")
    
    try:
        # Tentar obter orquestrador
        orquestrador = obter_orquestrador()
        
        # Verificar peritos dispon√≠veis
        peritos_disponiveis = orquestrador.agente_advogado.listar_peritos_disponiveis()
        
        # Verificar se h√° pelo menos 1 perito
        if len(peritos_disponiveis) == 0:
            raise RuntimeError("Nenhum perito registrado no sistema")
        
        status_info = {
            "status": "healthy",
            "modulo": "analise_multi_agent",
            "timestamp": datetime.now().isoformat(),
            "orquestrador": "operacional",
            "agente_advogado": "operacional",
            "peritos_disponiveis": peritos_disponiveis,
            "total_peritos": len(peritos_disponiveis)
        }
        
        logger.info(f"‚úÖ Health check OK | Peritos: {peritos_disponiveis}")
        return status_info
        
    except Exception as erro:
        logger.error(f"‚ùå Health check FALHOU: {str(erro)}")
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail=f"M√≥dulo de an√°lise indispon√≠vel: {str(erro)}"
        )


# ==============================================================================
# ENDPOINTS ASS√çNCRONOS (TAREFA-031)
# ==============================================================================

# CONTEXTO (TAREFA-031):
# Os endpoints abaixo implementam o fluxo de an√°lise ass√≠ncrona para resolver
# o problema de TIMEOUT em an√°lises longas (>2 minutos).
#
# FLUXO ASS√çNCRONO:
# 1. POST /api/analise/iniciar ‚Üí Retorna consulta_id imediatamente
# 2. Backend processa em background (BackgroundTasks do FastAPI)
# 3. GET /api/analise/status/{id} ‚Üí Polling de status (INICIADA, PROCESSANDO, CONCLUIDA, ERRO)
# 4. GET /api/analise/resultado/{id} ‚Üí Obt√©m resultado quando CONCLUIDA
#
# VANTAGENS:
# - Sem limite de tempo para processamento (an√°lises podem demorar 5+ minutos)
# - Frontend recebe resposta imediata (UUID da consulta)
# - Feedback de progresso em tempo real (etapa_atual, progresso_percentual)
# - Melhor UX (barra de progresso, n√£o trava a UI)
#
# DEPEND√äNCIAS:
# - TAREFA-030: GerenciadorEstadoTarefas e _processar_consulta_em_background()


@router.post(
    "/iniciar",
    response_model=RespostaIniciarAnalise,
    status_code=status.HTTP_202_ACCEPTED,
    summary="Iniciar an√°lise multi-agent ass√≠ncrona (TAREFA-031)",
    description="""
    Inicia an√°lise jur√≠dica multi-agent de forma **ass√≠ncrona**.
    
    **MOTIVA√á√ÉO (TAREFA-031):**
    An√°lises com m√∫ltiplos agentes podem demorar 2-5+ minutos, causando
    TIMEOUT HTTP em requests s√≠ncronos. Este endpoint resolve isso retornando
    um `consulta_id` imediatamente e processando a an√°lise em background.
    
    **FLUXO ASS√çNCRONO:**
    1. Cliente ‚Üí POST /api/analise/iniciar {"prompt": "...", "agentes_selecionados": [...]}
    2. Servidor cria tarefa e retorna {"consulta_id": "uuid", "status": "INICIADA"}
    3. Servidor processa an√°lise em background (BackgroundTasks)
    4. Cliente faz polling: GET /api/analise/status/{consulta_id} a cada 2-3s
    5. Status muda: INICIADA ‚Üí PROCESSANDO ‚Üí CONCLUIDA
    6. Cliente obt√©m resultado: GET /api/analise/resultado/{consulta_id}
    
    **VANTAGENS:**
    - ‚úÖ Sem limite de tempo (an√°lises podem demorar quanto necess√°rio)
    - ‚úÖ Resposta imediata (n√£o bloqueia o cliente)
    - ‚úÖ Feedback de progresso em tempo real
    - ‚úÖ Melhor experi√™ncia de usu√°rio (UX)
    
    **REQUEST BODY:**
    Id√™ntico ao endpoint s√≠ncrono POST /api/analise/multi-agent:
    - `prompt`: Pergunta/solicita√ß√£o de an√°lise
    - `agentes_selecionados`: Lista de peritos (opcional)
    - `advogados_selecionados`: Lista de advogados especialistas (opcional)
    - `documento_ids`: Lista de documentos espec√≠ficos para RAG (opcional)
    
    **RESPONSE:**
    ```json
    {
      "sucesso": true,
      "consulta_id": "550e8400-e29b-41d4-a716-446655440000",
      "status": "INICIADA",
      "mensagem": "An√°lise iniciada! Use GET /api/analise/status/{id} para acompanhar.",
      "timestamp_criacao": "2025-10-24T16:00:00.000Z"
    }
    ```
    
    **PR√ìXIMOS PASSOS:**
    1. Armazenar `consulta_id`
    2. Fazer polling em GET /api/analise/status/{consulta_id} a cada 2-3s
    3. Quando status = "CONCLUIDA", chamar GET /api/analise/resultado/{consulta_id}
    
    **COMPARA√á√ÉO COM ENDPOINT S√çNCRONO:**
    - S√≠ncrono (`/multi-agent`): Retorna resultado completo (pode dar timeout >2min)
    - Ass√≠ncrono (`/iniciar`): Retorna UUID imediatamente (sem risco de timeout)
    """,
    responses={
        202: {
            "description": "Tarefa criada e agendada com sucesso (an√°lise em background)",
            "model": RespostaIniciarAnalise
        },
        400: {
            "description": "Request inv√°lida (prompt vazio, agentes inv√°lidos)",
            "model": RespostaErro
        },
        422: {
            "description": "Valida√ß√£o Pydantic falhou"
        },
        500: {
            "description": "Erro ao criar tarefa",
            "model": RespostaErro
        }
    }
)
async def endpoint_iniciar_analise_assincrona(
    request_body: RequestIniciarAnalise,
    background_tasks: BackgroundTasks
) -> RespostaIniciarAnalise:
    """
    Endpoint POST /api/analise/iniciar (TAREFA-031)
    
    Inicia an√°lise multi-agent de forma ass√≠ncrona.
    
    FLUXO INTERNO:
    1. Gera UUID √∫nico para consulta (consulta_id)
    2. Cria tarefa no GerenciadorEstadoTarefas (status: INICIADA)
    3. Agenda processamento em background via BackgroundTasks
    4. Retorna consulta_id IMEDIATAMENTE ao cliente (n√£o aguarda processamento)
    5. Background task executa: orquestrador._processar_consulta_em_background()
       - Processa an√°lise completa (RAG, peritos, advogados, compila√ß√£o)
       - Atualiza status no gerenciador (PROCESSANDO ‚Üí CONCLUIDA ou ERRO)
       - Armazena resultado no gerenciador
    
    DIFEREN√áAS VS ENDPOINT S√çNCRONO:
    - N√£o aguarda processamento (retorna UUID)
    - Usa BackgroundTasks do FastAPI
    - Status code 202 (Accepted) vs 200 (OK)
    - Resultado obtido via GET /api/analise/resultado/{id}
    
    TRATAMENTO DE ERROS:
    - ValueError: Valida√ß√£o falhou (400)
    - Exception gen√©rica ao criar tarefa: (500)
    - Erros durante processamento background: Salvos no gerenciador (status: ERRO)
    
    Args:
        request_body: RequestIniciarAnalise validado pelo Pydantic
        background_tasks: BackgroundTasks do FastAPI (injetado automaticamente)
        
    Returns:
        RespostaIniciarAnalise com consulta_id e status INICIADA
        
    Raises:
        HTTPException: Em caso de erro ao criar tarefa (400, 500)
    """
    logger.info("=" * 60)
    logger.info("üöÄ NOVA REQUISI√á√ÉO DE AN√ÅLISE ASS√çNCRONA (TAREFA-031)")
    logger.info("=" * 60)
    logger.info(f"Prompt: {request_body.prompt[:100]}...")
    logger.info(f"Peritos selecionados: {request_body.agentes_selecionados}")
    logger.info(f"Advogados selecionados: {request_body.advogados_selecionados}")
    logger.info(f"Documentos filtrados: {len(request_body.documento_ids) if request_body.documento_ids else 'Todos'}")
    
    try:
        # ===== GERAR UUID PARA CONSULTA =====
        consulta_id = str(uuid.uuid4())
        logger.info(f"üìù Consulta ID gerado: {consulta_id}")
        
        # ===== OBTER GERENCIADOR DE ESTADO =====
        gerenciador = obter_gerenciador_estado_tarefas()
        
        # ===== CRIAR TAREFA NO GERENCIADOR =====
        gerenciador.criar_tarefa(
            consulta_id=consulta_id,
            prompt=request_body.prompt,
            agentes_selecionados=request_body.agentes_selecionados or [],
            advogados_selecionados=request_body.advogados_selecionados or [],
            documento_ids=request_body.documento_ids or []
        )
        logger.info(f"‚úÖ Tarefa criada no gerenciador (status: INICIADA)")
        
        # ===== OBTER INST√ÇNCIA DO ORQUESTRADOR =====
        orquestrador = obter_orquestrador()
        
        # ===== AGENDAR PROCESSAMENTO EM BACKGROUND =====
        background_tasks.add_task(
            orquestrador._processar_consulta_em_background,
            consulta_id=consulta_id,
            prompt=request_body.prompt,
            agentes_selecionados=request_body.agentes_selecionados,
            advogados_selecionados=request_body.advogados_selecionados,
            documento_ids=request_body.documento_ids
        )
        logger.info(f"üìã Tarefa agendada em background (BackgroundTasks)")
        
        # ===== CONSTRUIR RESPOSTA =====
        timestamp_criacao = datetime.now().isoformat()
        
        resposta = RespostaIniciarAnalise(
            sucesso=True,
            consulta_id=consulta_id,
            status="INICIADA",
            mensagem=f"An√°lise iniciada com sucesso! Use GET /api/analise/status/{consulta_id} para acompanhar o progresso.",
            timestamp_criacao=timestamp_criacao
        )
        
        logger.info("üéØ Resposta enviada ao cliente (consulta_id retornado)")
        logger.info("‚ö° Processamento em background iniciado...")
        logger.info("=" * 60)
        
        return resposta
        
    except ValueError as erro_validacao:
        # Erro de valida√ß√£o
        logger.error(f"‚ùå Erro de valida√ß√£o ao criar tarefa: {str(erro_validacao)}")
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(erro_validacao)
        )
        
    except Exception as erro_geral:
        # Erro gen√©rico ao criar tarefa
        logger.exception("üí• Erro inesperado ao criar tarefa ass√≠ncrona:")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro ao criar tarefa de an√°lise: {str(erro_geral)}"
        )


@router.get(
    "/status/{consulta_id}",
    response_model=RespostaStatusAnalise,
    status_code=status.HTTP_200_OK,
    summary="Verificar status de an√°lise ass√≠ncrona (TAREFA-031)",
    description="""
    Verifica o status atual de uma an√°lise ass√≠ncrona em andamento.
    
    **CONTEXTO (TAREFA-031):**
    Endpoint de **polling** para acompanhar o progresso de uma an√°lise.
    O cliente deve chamar este endpoint repetidamente (a cada 2-3s) at√© que
    o status seja "CONCLUIDA" ou "ERRO".
    
    **ESTADOS POSS√çVEIS:**
    - **INICIADA**: Tarefa criada, aguardando in√≠cio do processamento
    - **PROCESSANDO**: An√°lise em execu√ß√£o (RAG, peritos, advogados, compila√ß√£o)
    - **CONCLUIDA**: An√°lise finalizada ‚Üí chamar GET /api/analise/resultado/{id}
    - **ERRO**: Falha durante processamento ‚Üí ver `mensagem_erro`
    
    **FLUXO DE POLLING:**
    ```javascript
    // Frontend: Polling a cada 3 segundos
    const intervalo = setInterval(async () => {
      const resposta = await fetch(`/api/analise/status/${consulta_id}`);
      const dados = await resposta.json();
      
      if (dados.status === 'CONCLUIDA') {
        clearInterval(intervalo);
        obterResultado(consulta_id);
      } else if (dados.status === 'ERRO') {
        clearInterval(intervalo);
        exibirErro(dados.mensagem_erro);
      } else {
        atualizarProgressoUI(dados.progresso_percentual, dados.etapa_atual);
      }
    }, 3000);
    ```
    
    **RESPONSE:**
    ```json
    {
      "consulta_id": "550e8400-e29b-41d4-a716-446655440000",
      "status": "PROCESSANDO",
      "etapa_atual": "Delegando an√°lise para peritos especializados",
      "progresso_percentual": 45,
      "timestamp_atualizacao": "2025-10-24T16:01:30.000Z",
      "mensagem_erro": null
    }
    ```
    
    **CAMPOS DE PROGRESSO:**
    - `etapa_atual`: Descri√ß√£o leg√≠vel da etapa (ex: "Consultando RAG", "Compilando resposta")
    - `progresso_percentual`: 0-100% (para barra de progresso visual)
    
    **QUANDO PARAR O POLLING:**
    - status = "CONCLUIDA" ‚Üí Obter resultado via GET /api/analise/resultado/{id}
    - status = "ERRO" ‚Üí Exibir `mensagem_erro` ao usu√°rio
    """,
    responses={
        200: {
            "description": "Status da an√°lise retornado com sucesso",
            "model": RespostaStatusAnalise
        },
        404: {
            "description": "Consulta n√£o encontrada (consulta_id inv√°lido)",
            "model": RespostaErro
        },
        500: {
            "description": "Erro ao consultar status",
            "model": RespostaErro
        }
    }
)
async def endpoint_verificar_status_analise(
    consulta_id: str
) -> RespostaStatusAnalise:
    """
    Endpoint GET /api/analise/status/{consulta_id} (TAREFA-031)
    
    Verifica status de an√°lise ass√≠ncrona (endpoint de polling).
    
    FLUXO INTERNO:
    1. Consulta GerenciadorEstadoTarefas com consulta_id
    2. Se tarefa n√£o encontrada ‚Üí 404 Not Found
    3. Se encontrada ‚Üí Retorna status, etapa_atual, progresso, etc.
    
    ESTADOS:
    - INICIADA: Aguardando in√≠cio
    - PROCESSANDO: Em execu√ß√£o (RAG, peritos, advogados)
    - CONCLUIDA: Finalizada (chamar GET /resultado)
    - ERRO: Falhou (ver mensagem_erro)
    
    USO:
    Frontend chama repetidamente (polling a cada 2-3s) at√©
    status ser CONCLUIDA ou ERRO.
    
    Args:
        consulta_id: UUID da consulta (retornado por POST /iniciar)
        
    Returns:
        RespostaStatusAnalise com status atual da an√°lise
        
    Raises:
        HTTPException: 404 se consulta n√£o encontrada, 500 em caso de erro
    """
    logger.info(f"üîç Verificando status da consulta: {consulta_id}")
    
    try:
        # ===== OBTER GERENCIADOR DE ESTADO =====
        gerenciador = obter_gerenciador_estado_tarefas()
        
        # ===== CONSULTAR TAREFA =====
        tarefa = gerenciador.obter_tarefa(consulta_id)
        
        if tarefa is None:
            logger.warning(f"‚ö†Ô∏è Consulta n√£o encontrada: {consulta_id}")
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Consulta n√£o encontrada: {consulta_id}"
            )
        
        # ===== CONSTRUIR RESPOSTA =====
        resposta = RespostaStatusAnalise(
            consulta_id=tarefa.consulta_id,
            status=tarefa.status.value,  # Enum ‚Üí string
            etapa_atual=tarefa.etapa_atual,
            progresso_percentual=tarefa.progresso_percentual,
            timestamp_atualizacao=tarefa.timestamp_atualizacao,
            mensagem_erro=tarefa.mensagem_erro
        )
        
        logger.info(f"‚úÖ Status retornado: {tarefa.status.value} ({tarefa.progresso_percentual}%) - {tarefa.etapa_atual}")
        
        return resposta
        
    except HTTPException:
        # Re-raise HTTPException (404)
        raise
        
    except Exception as erro_geral:
        # Erro gen√©rico
        logger.exception(f"üí• Erro ao verificar status da consulta {consulta_id}:")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro ao verificar status: {str(erro_geral)}"
        )


@router.get(
    "/resultado/{consulta_id}",
    response_model=RespostaResultadoAnalise,
    status_code=status.HTTP_200_OK,
    summary="Obter resultado de an√°lise ass√≠ncrona (TAREFA-031)",
    description="""
    Obt√©m o resultado completo de uma an√°lise ass√≠ncrona **CONCLU√çDA**.
    
    **CONTEXTO (TAREFA-031):**
    Ap√≥s fazer polling em GET /api/analise/status/{id} e obter status "CONCLUIDA",
    o cliente chama este endpoint para obter o resultado completo da an√°lise multi-agent.
    
    **IMPORTANTE:**
    - ‚úÖ Se status = "CONCLUIDA" ‚Üí Retorna resultado completo (200 OK)
    - ‚ùå Se status = "PROCESSANDO" ‚Üí Retorna erro 425 (Too Early - "ainda processando")
    - ‚ùå Se status = "ERRO" ‚Üí Retorna erro 500 com mensagem de erro
    - ‚ùå Se status = "INICIADA" ‚Üí Retorna erro 425 (Too Early - "aguardando in√≠cio")
    
    **RESULTADO RETORNADO:**
    Id√™ntico ao endpoint s√≠ncrono POST /api/analise/multi-agent:
    - `resposta_compilada`: Resposta final do Advogado Coordenador
    - `pareceres_individuais`: Pareceres t√©cnicos dos peritos
    - `pareceres_advogados`: Pareceres jur√≠dicos dos advogados especialistas
    - `documentos_consultados`: Documentos do RAG usados
    - `agentes_utilizados`: IDs dos peritos que participaram
    - `advogados_utilizados`: IDs dos advogados que participaram
    - `tempo_total_segundos`: Tempo REAL de processamento (pode ser >2 minutos!)
    
    **RESPONSE (SUCESSO):**
    ```json
    {
      "sucesso": true,
      "consulta_id": "550e8400-e29b-41d4-a716-446655440000",
      "status": "CONCLUIDA",
      "resposta_compilada": "Com base nos pareceres t√©cnicos e jur√≠dicos...",
      "pareceres_individuais": [...],
      "pareceres_advogados": [...],
      "documentos_consultados": ["laudo.pdf", "processo.pdf"],
      "agentes_utilizados": ["medico"],
      "advogados_utilizados": ["trabalhista"],
      "tempo_total_segundos": 187.5,
      "timestamp_inicio": "2025-10-24T16:00:00.000Z",
      "timestamp_fim": "2025-10-24T16:03:07.500Z"
    }
    ```
    
    **USO NO FRONTEND:**
    Exibir exatamente da mesma forma que o endpoint s√≠ncrono:
    - Resposta compilada em destaque
    - Pareceres de peritos em se√ß√£o expand√≠vel
    - Pareceres de advogados em se√ß√£o expand√≠vel
    - Metadados (documentos, tempos, etc.)
    """,
    responses={
        200: {
            "description": "Resultado da an√°lise retornado com sucesso",
            "model": RespostaResultadoAnalise
        },
        404: {
            "description": "Consulta n√£o encontrada",
            "model": RespostaErro
        },
        425: {
            "description": "An√°lise ainda em processamento (Too Early)",
            "model": RespostaErro
        },
        500: {
            "description": "Erro durante an√°lise ou ao obter resultado",
            "model": RespostaErro
        }
    }
)
async def endpoint_obter_resultado_analise(
    consulta_id: str
) -> RespostaResultadoAnalise:
    """
    Endpoint GET /api/analise/resultado/{consulta_id} (TAREFA-031)
    
    Obt√©m resultado completo de an√°lise ass√≠ncrona CONCLU√çDA.
    
    FLUXO INTERNO:
    1. Consulta GerenciadorEstadoTarefas com consulta_id
    2. Se tarefa n√£o encontrada ‚Üí 404 Not Found
    3. Se status != CONCLUIDA ‚Üí 425 Too Early ("ainda processando")
    4. Se status = ERRO ‚Üí 500 com mensagem de erro
    5. Se status = CONCLUIDA ‚Üí Formata e retorna resultado completo
    
    VALIDA√á√ïES:
    - Tarefa deve existir no gerenciador
    - Status deve ser CONCLUIDA (n√£o PROCESSANDO, INICIADA ou ERRO)
    - Resultado deve estar dispon√≠vel (n√£o None)
    
    FORMATA√á√ÉO:
    Converte resultado armazenado no gerenciador para RespostaResultadoAnalise:
    - Pareceres de peritos (dict ‚Üí ParecerIndividualPerito)
    - Pareceres de advogados (dict ‚Üí ParecerIndividualAdvogado)
    - Metadados (tempos, documentos, agentes)
    
    Args:
        consulta_id: UUID da consulta (retornado por POST /iniciar)
        
    Returns:
        RespostaResultadoAnalise com resultado completo da an√°lise
        
    Raises:
        HTTPException: 404 (n√£o encontrado), 425 (ainda processando), 500 (erro)
    """
    logger.info(f"üìä Obtendo resultado da consulta: {consulta_id}")
    
    try:
        # ===== OBTER GERENCIADOR DE ESTADO =====
        gerenciador = obter_gerenciador_estado_tarefas()
        
        # ===== CONSULTAR TAREFA =====
        tarefa = gerenciador.obter_tarefa(consulta_id)
        
        if tarefa is None:
            logger.warning(f"‚ö†Ô∏è Consulta n√£o encontrada: {consulta_id}")
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Consulta n√£o encontrada: {consulta_id}"
            )
        
        # ===== VALIDAR STATUS =====
        if tarefa.status == StatusTarefa.ERRO:
            logger.error(f"‚ùå Consulta finalizou com erro: {tarefa.mensagem_erro}")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail=f"Erro durante an√°lise: {tarefa.mensagem_erro}"
            )
        
        if tarefa.status in [StatusTarefa.INICIADA, StatusTarefa.PROCESSANDO]:
            logger.warning(f"‚è≥ Consulta ainda em processamento (status: {tarefa.status.value})")
            raise HTTPException(
                status_code=status.HTTP_425_TOO_EARLY,
                detail=f"An√°lise ainda em processamento (status: {tarefa.status.value}). "
                       f"Use GET /api/analise/status/{consulta_id} para acompanhar o progresso."
            )
        
        # ===== STATUS = CONCLUIDA ‚Üí RETORNAR RESULTADO =====
        
        if tarefa.resultado is None:
            logger.error(f"üí• Tarefa conclu√≠da mas resultado √© None (inconsist√™ncia)")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Resultado n√£o dispon√≠vel (erro interno)"
            )
        
        # Extrair dados do resultado
        resultado_dict = tarefa.resultado
        
        # Formatar pareceres individuais de peritos
        pareceres_peritos_formatados = []
        if "pareceres_individuais" in resultado_dict:
            for parecer_dict in resultado_dict["pareceres_individuais"]:
                parecer_formatado = ParecerIndividualPerito(
                    nome_agente=parecer_dict.get("nome_agente", "Desconhecido"),
                    tipo_agente=parecer_dict.get("tipo_agente", "desconhecido"),
                    parecer=parecer_dict.get("parecer", ""),
                    grau_confianca=parecer_dict.get("grau_confianca", 0.0),
                    documentos_referenciados=parecer_dict.get("documentos_referenciados", []),
                    timestamp=parecer_dict.get("timestamp", datetime.now().isoformat())
                )
                pareceres_peritos_formatados.append(parecer_formatado)
        
        # Formatar pareceres individuais de advogados
        pareceres_advogados_formatados = []
        if "pareceres_advogados" in resultado_dict:
            for parecer_dict in resultado_dict["pareceres_advogados"]:
                parecer_formatado = ParecerIndividualAdvogado(
                    nome_agente=parecer_dict.get("nome_agente", "Desconhecido"),
                    tipo_agente=parecer_dict.get("tipo_agente", "desconhecido"),
                    area_especializacao=parecer_dict.get("area_especializacao", ""),
                    parecer=parecer_dict.get("parecer", ""),
                    legislacao_citada=parecer_dict.get("legislacao_citada", []),
                    grau_confianca=parecer_dict.get("grau_confianca", 0.0),
                    documentos_referenciados=parecer_dict.get("documentos_referenciados", []),
                    timestamp=parecer_dict.get("timestamp", datetime.now().isoformat())
                )
                pareceres_advogados_formatados.append(parecer_formatado)
        
        # Construir resposta final
        resposta = RespostaResultadoAnalise(
            sucesso=True,
            consulta_id=tarefa.consulta_id,
            status=tarefa.status.value,
            resposta_compilada=resultado_dict.get("resposta_compilada", ""),
            pareceres_individuais=pareceres_peritos_formatados,
            pareceres_advogados=pareceres_advogados_formatados,
            documentos_consultados=resultado_dict.get("documentos_consultados", []),
            agentes_utilizados=resultado_dict.get("agentes_utilizados", []),
            advogados_utilizados=resultado_dict.get("advogados_utilizados", []),
            tempo_total_segundos=resultado_dict.get("tempo_total_segundos", 0.0),
            timestamp_inicio=resultado_dict.get("timestamp_inicio", ""),
            timestamp_fim=resultado_dict.get("timestamp_fim", "")
        )
        
        logger.info(f"‚úÖ Resultado retornado com sucesso")
        logger.info(f"   - Peritos: {resposta.agentes_utilizados}")
        logger.info(f"   - Advogados: {resposta.advogados_utilizados}")
        logger.info(f"   - Tempo total: {resposta.tempo_total_segundos:.2f}s")
        logger.info(f"   - Documentos consultados: {len(resposta.documentos_consultados)}")
        
        return resposta
        
    except HTTPException:
        # Re-raise HTTPException (404, 425, 500)
        raise
        
    except Exception as erro_geral:
        # Erro gen√©rico
        logger.exception(f"üí• Erro ao obter resultado da consulta {consulta_id}:")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro ao obter resultado: {str(erro_geral)}"
        )
