# ==========================================
# DOCKER COMPOSE - PLATAFORMA JURÍDICA MULTI-AGENT
# ==========================================
# 
# Orquestra todos os serviços necessários para a plataforma:
# - backend: API FastAPI com sistema RAG
# - chromadb: Banco de dados vetorial (futuro)
# - frontend: Interface React (futuro)
#
# JUSTIFICATIVA PARA LLMs: Docker Compose permite subir toda a stack
# com um único comando, garantindo versões consistentes e configuração padronizada.
# ==========================================

version: '3.8'

services:
  # ===== BACKEND FASTAPI =====
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: multiagent-backend
    ports:
      - "8000:8000"
    volumes:
      # Código fonte (permite hot reload durante desenvolvimento)
      - ./backend/src:/app/src:ro
      # Dados persistentes
      - ./backend/dados:/app/dados
      # Logs
      - ./backend/logs:/app/logs
    environment:
      # Configurações da aplicação (do .env ou valores padrão)
      - AMBIENTE=${AMBIENTE:-development}
      - DEBUG=${DEBUG:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # Configurações do ChromaDB
      - CHROMA_DB_PATH=${CHROMA_DB_PATH:-/app/dados/chroma_db}
      - CHROMA_COLLECTION_NAME=${CHROMA_COLLECTION_NAME:-documentos_juridicos}
      
      # Configurações de upload
      - UPLOAD_DIR=${UPLOAD_DIR:-/app/dados/uploads_temp}
      - MAX_UPLOAD_SIZE_MB=${MAX_UPLOAD_SIZE_MB:-50}
      
      # Configurações OpenAI (carregadas do .env)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - OPENAI_EMBEDDING_MODEL=${OPENAI_EMBEDDING_MODEL:-text-embedding-ada-002}
      
      # Configurações do servidor
      - HOST=${HOST:-0.0.0.0}
      - PORT=${PORT:-8000}
      
      # Configurações CORS
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173}
      
    env_file:
      - .env
    networks:
      - multiagent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - chromadb

  # ===== CHROMADB (Banco Vetorial) =====
  # NOTA: Por enquanto usamos ChromaDB embutido no backend.
  # Este serviço será ativado quando migrarmos para ChromaDB server.
  chromadb:
    image: chromadb/chroma:latest
    container_name: multiagent-chromadb
    ports:
      - "8001:8000"
    volumes:
      - chroma-data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - ANONYMIZED_TELEMETRY=FALSE
    networks:
      - multiagent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

# ===== VOLUMES PERSISTENTES =====
volumes:
  chroma-data:
    driver: local
    name: multiagent-chroma-data

# ===== REDE =====
networks:
  multiagent-network:
    driver: bridge
    name: multiagent-network
